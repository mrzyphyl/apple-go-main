{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n  _excluded2 = [\"openByDefault\", \"lazy\", \"drawerContentOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from \"../views/DrawerView\";\nfunction DrawerNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    customDefaultStatus = _ref.defaultStatus,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  var openByDefault = restWithDeprecated.openByDefault,\n    lazy = restWithDeprecated.lazy,\n    drawerContentOptions = restWithDeprecated.drawerContentOptions,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n  if (drawerContentOptions) {\n    _extends2(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, \"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");\n  }\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, \"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");\n  }\n  var defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      defaultStatus: defaultStatus,\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\@react-navigation\\drawer\\src\\navigators\\createDrawerNavigator.tsx"],"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","id","initialRouteName","defaultStatus","customDefaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent"],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}