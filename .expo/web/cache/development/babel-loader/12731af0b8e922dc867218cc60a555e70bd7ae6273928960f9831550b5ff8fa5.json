{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { checkCppVersion } from \"../platform-specific/checkCppVersion\";\nimport { getValueUnpackerCode } from \"../valueUnpacker\";\nexport var NativeReanimated = function () {\n  function NativeReanimated() {\n    _classCallCheck(this, NativeReanimated);\n    _defineProperty(this, \"native\", true);\n    _defineProperty(this, \"InnerNativeModule\", void 0);\n    if (global.__reanimatedModuleProxy === undefined) {\n      var ReanimatedModule = NativeModules.ReanimatedModule;\n      ReanimatedModule === null || ReanimatedModule === void 0 ? void 0 : ReanimatedModule.installTurboModule();\n    }\n    if (global.__reanimatedModuleProxy === undefined) {\n      throw new Error(\"[Reanimated] Native part of Reanimated doesn't seem to be initialized.\\nSee https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#Native-part-of-reanimated-doesnt-seem-to-be-initialized for more details.\");\n    }\n    checkCppVersion();\n    this.InnerNativeModule = global.__reanimatedModuleProxy;\n    this.InnerNativeModule.installValueUnpacker(getValueUnpackerCode());\n  }\n  _createClass(NativeReanimated, [{\n    key: \"makeShareableClone\",\n    value: function makeShareableClone(value, shouldPersistRemote) {\n      return this.InnerNativeModule.makeShareableClone(value, shouldPersistRemote);\n    }\n  }, {\n    key: \"makeSynchronizedDataHolder\",\n    value: function makeSynchronizedDataHolder(valueRef) {\n      return this.InnerNativeModule.makeSynchronizedDataHolder(valueRef);\n    }\n  }, {\n    key: \"getDataSynchronously\",\n    value: function getDataSynchronously(ref) {\n      return this.InnerNativeModule.getDataSynchronously(ref);\n    }\n  }, {\n    key: \"scheduleOnUI\",\n    value: function scheduleOnUI(shareable) {\n      return this.InnerNativeModule.scheduleOnUI(shareable);\n    }\n  }, {\n    key: \"createWorkletRuntime\",\n    value: function createWorkletRuntime(name, initializer) {\n      return this.InnerNativeModule.createWorkletRuntime(name, initializer);\n    }\n  }, {\n    key: \"registerSensor\",\n    value: function registerSensor(sensorType, interval, iosReferenceFrame, handler) {\n      return this.InnerNativeModule.registerSensor(sensorType, interval, iosReferenceFrame, handler);\n    }\n  }, {\n    key: \"unregisterSensor\",\n    value: function unregisterSensor(sensorId) {\n      return this.InnerNativeModule.unregisterSensor(sensorId);\n    }\n  }, {\n    key: \"registerEventHandler\",\n    value: function registerEventHandler(eventHandler, eventName, emitterReactTag) {\n      return this.InnerNativeModule.registerEventHandler(eventHandler, eventName, emitterReactTag);\n    }\n  }, {\n    key: \"unregisterEventHandler\",\n    value: function unregisterEventHandler(id) {\n      return this.InnerNativeModule.unregisterEventHandler(id);\n    }\n  }, {\n    key: \"getViewProp\",\n    value: function getViewProp(viewTag, propName, callback) {\n      return this.InnerNativeModule.getViewProp(viewTag, propName, callback);\n    }\n  }, {\n    key: \"configureLayoutAnimation\",\n    value: function configureLayoutAnimation(viewTag, type, sharedTransitionTag, config) {\n      this.InnerNativeModule.configureLayoutAnimation(viewTag, type, sharedTransitionTag, config);\n    }\n  }, {\n    key: \"enableLayoutAnimations\",\n    value: function enableLayoutAnimations(flag) {\n      this.InnerNativeModule.enableLayoutAnimations(flag);\n    }\n  }, {\n    key: \"configureProps\",\n    value: function configureProps(uiProps, nativeProps) {\n      this.InnerNativeModule.configureProps(uiProps, nativeProps);\n    }\n  }, {\n    key: \"subscribeForKeyboardEvents\",\n    value: function subscribeForKeyboardEvents(handler, isStatusBarTranslucent) {\n      return this.InnerNativeModule.subscribeForKeyboardEvents(handler, isStatusBarTranslucent);\n    }\n  }, {\n    key: \"unsubscribeFromKeyboardEvents\",\n    value: function unsubscribeFromKeyboardEvents(listenerId) {\n      this.InnerNativeModule.unsubscribeFromKeyboardEvents(listenerId);\n    }\n  }]);\n  return NativeReanimated;\n}();","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\NativeReanimated\\NativeReanimated.ts"],"names":["checkCppVersion","getValueUnpackerCode","NativeReanimated","_defineProperty","constructor","global","__reanimatedModuleProxy","undefined","ReanimatedModule","NativeModules","installTurboModule","Error","InnerNativeModule","installValueUnpacker","makeShareableClone","value","shouldPersistRemote","makeSynchronizedDataHolder","valueRef","getDataSynchronously","ref","scheduleOnUI","shareable","createWorkletRuntime","name","initializer","registerSensor","sensorType","interval","iosReferenceFrame","handler","unregisterSensor","sensorId","registerEventHandler","eventHandler","eventName","emitterReactTag","unregisterEventHandler","id","getViewProp","viewTag","propName","callback","configureLayoutAnimation","type","sharedTransitionTag","config","enableLayoutAnimations","flag","configureProps","uiProps","nativeProps","subscribeForKeyboardEvents","isStatusBarTranslucent","unsubscribeFromKeyboardEvents","listenerId"],"mappings":"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","sourcesContent":["import { NativeModules } from 'react-native';\nimport type {\n  ShareableRef,\n  ShareableSyncDataHolderRef,\n  Value3D,\n  ValueRotation,\n} from '../commonTypes';\nimport type {\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n} from '../layoutReanimation';\nimport { checkCppVersion } from '../platform-specific/checkCppVersion';\nimport type { WorkletRuntime } from '../runtimes';\nimport { getValueUnpackerCode } from '../valueUnpacker';\n\n// this is the type of `__reanimatedModuleProxy` which is injected using JSI\nexport interface NativeReanimatedModule {\n  installValueUnpacker(valueUnpackerCode: string): void;\n  makeShareableClone<T>(\n    value: T,\n    shouldPersistRemote: boolean\n  ): ShareableRef<T>;\n  makeSynchronizedDataHolder<T>(\n    valueRef: ShareableRef<T>\n  ): ShareableSyncDataHolderRef<T>;\n  getDataSynchronously<T>(ref: ShareableSyncDataHolderRef<T>): T;\n  scheduleOnUI<T>(shareable: ShareableRef<T>): void;\n  createWorkletRuntime(\n    name: string,\n    initializer: ShareableRef<() => void>\n  ): WorkletRuntime;\n  registerEventHandler<T>(\n    eventHandler: ShareableRef<T>,\n    eventName: string,\n    emitterReactTag: number\n  ): number;\n  unregisterEventHandler(id: number): void;\n  getViewProp<T>(\n    viewTag: number,\n    propName: string,\n    callback?: (result: T) => void\n  ): Promise<T>;\n  enableLayoutAnimations(flag: boolean): void;\n  registerSensor(\n    sensorType: number,\n    interval: number,\n    iosReferenceFrame: number,\n    handler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ): number;\n  unregisterSensor(sensorId: number): void;\n  configureProps(uiProps: string[], nativeProps: string[]): void;\n  subscribeForKeyboardEvents(\n    handler: ShareableRef<number>,\n    isStatusBarTranslucent: boolean\n  ): number;\n  unsubscribeFromKeyboardEvents(listenerId: number): void;\n  configureLayoutAnimation(\n    viewTag: number,\n    type: LayoutAnimationType,\n    sharedTransitionTag: string,\n    config: ShareableRef<Keyframe | LayoutAnimationFunction>\n  ): void;\n}\n\nexport class NativeReanimated {\n  native = true;\n  private InnerNativeModule: NativeReanimatedModule;\n\n  constructor() {\n    if (global.__reanimatedModuleProxy === undefined) {\n      const { ReanimatedModule } = NativeModules;\n      ReanimatedModule?.installTurboModule();\n    }\n    if (global.__reanimatedModuleProxy === undefined) {\n      throw new Error(\n        `[Reanimated] Native part of Reanimated doesn't seem to be initialized.\nSee https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#Native-part-of-reanimated-doesnt-seem-to-be-initialized for more details.`\n      );\n    }\n    checkCppVersion();\n    this.InnerNativeModule = global.__reanimatedModuleProxy;\n    this.InnerNativeModule.installValueUnpacker(getValueUnpackerCode());\n  }\n\n  makeShareableClone<T>(value: T, shouldPersistRemote: boolean) {\n    return this.InnerNativeModule.makeShareableClone(\n      value,\n      shouldPersistRemote\n    );\n  }\n\n  makeSynchronizedDataHolder<T>(valueRef: ShareableRef<T>) {\n    return this.InnerNativeModule.makeSynchronizedDataHolder(valueRef);\n  }\n\n  getDataSynchronously<T>(ref: ShareableSyncDataHolderRef<T>) {\n    return this.InnerNativeModule.getDataSynchronously(ref);\n  }\n\n  scheduleOnUI<T>(shareable: ShareableRef<T>) {\n    return this.InnerNativeModule.scheduleOnUI(shareable);\n  }\n\n  createWorkletRuntime(name: string, initializer: ShareableRef<() => void>) {\n    return this.InnerNativeModule.createWorkletRuntime(name, initializer);\n  }\n\n  registerSensor(\n    sensorType: number,\n    interval: number,\n    iosReferenceFrame: number,\n    handler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ) {\n    return this.InnerNativeModule.registerSensor(\n      sensorType,\n      interval,\n      iosReferenceFrame,\n      handler\n    );\n  }\n\n  unregisterSensor(sensorId: number) {\n    return this.InnerNativeModule.unregisterSensor(sensorId);\n  }\n\n  registerEventHandler<T>(\n    eventHandler: ShareableRef<T>,\n    eventName: string,\n    emitterReactTag: number\n  ) {\n    return this.InnerNativeModule.registerEventHandler(\n      eventHandler,\n      eventName,\n      emitterReactTag\n    );\n  }\n\n  unregisterEventHandler(id: number) {\n    return this.InnerNativeModule.unregisterEventHandler(id);\n  }\n\n  getViewProp<T>(\n    viewTag: number,\n    propName: string,\n    callback?: (result: T) => void\n  ) {\n    return this.InnerNativeModule.getViewProp(viewTag, propName, callback);\n  }\n\n  configureLayoutAnimation(\n    viewTag: number,\n    type: LayoutAnimationType,\n    sharedTransitionTag: string,\n    config: ShareableRef<Keyframe | LayoutAnimationFunction>\n  ) {\n    this.InnerNativeModule.configureLayoutAnimation(\n      viewTag,\n      type,\n      sharedTransitionTag,\n      config\n    );\n  }\n\n  enableLayoutAnimations(flag: boolean) {\n    this.InnerNativeModule.enableLayoutAnimations(flag);\n  }\n\n  configureProps(uiProps: string[], nativeProps: string[]) {\n    this.InnerNativeModule.configureProps(uiProps, nativeProps);\n  }\n\n  subscribeForKeyboardEvents(\n    handler: ShareableRef<number>,\n    isStatusBarTranslucent: boolean\n  ) {\n    return this.InnerNativeModule.subscribeForKeyboardEvents(\n      handler,\n      isStatusBarTranslucent\n    );\n  }\n\n  unsubscribeFromKeyboardEvents(listenerId: number) {\n    this.InnerNativeModule.unsubscribeFromKeyboardEvents(listenerId);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}