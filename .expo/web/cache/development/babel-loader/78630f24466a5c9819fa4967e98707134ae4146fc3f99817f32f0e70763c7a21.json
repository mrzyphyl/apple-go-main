{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { useEvent } from \"./utils\";\nimport { useSharedValue } from \"./useSharedValue\";\nvar scrollEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];\nexport function useScrollViewOffset(aref, initialRef) {\n  var offsetRef = useRef(initialRef !== undefined ? initialRef : useSharedValue(0));\n  var event = useEvent(function (event) {\n    'worklet';\n\n    offsetRef.current.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n  }, scrollEventNames);\n  useEffect(function () {\n    var _event$current;\n    var viewTag = findNodeHandle(aref.current);\n    (_event$current = event.current) === null || _event$current === void 0 ? void 0 : _event$current.registerForEvents(viewTag);\n  }, [aref.current]);\n  return offsetRef.current;\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useScrollViewOffset.ts"],"names":["useEffect","useRef","useEvent","useSharedValue","scrollEventNames","useScrollViewOffset","aref","initialRef","offsetRef","undefined","event","current","value","contentOffset","x","y","viewTag","findNodeHandle","registerForEvents"],"mappings":"AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAA,OAAA,cAAA;AAMzC,SAASC,QAAQ;AACjB,SAASC,cAAc;AAEvB,IAAMC,gBAAgB,GAAG,CACvB,UAAU,EACV,mBAAmB,EACnB,iBAAiB,EACjB,uBAAuB,EACvB,qBAAqB,CACtB;AAED,OAAO,SAASC,mBAAmBA,CACjCC,IAAoC,EACpCC,UAAgC,EACX;EACrB,IAAMC,SAAS,GAAGP,MAAM,CACtBM,UAAU,KAAKE,SAAS,GAAGF,UAAU,GAAGJ,cAAc,CAAC,CAAC,CAAC,CAC1D;EAED,IAAMO,KAAK,GAAGR,QAAQ,CAAeQ,UAAAA,KAAkB,EAAK;IAC1D,SAAS;;IACTF,SAAS,CAACG,OAAO,CAACC,KAAK,GACrBF,KAAK,CAACG,aAAa,CAACC,CAAC,KAAK,CAAC,GACvBJ,KAAK,CAACG,aAAa,CAACE,CAAC,GACrBL,KAAK,CAACG,aAAa,CAACC,CAAC;EAC7B,CAAC,EAAEV,gBAAgB,CAAC;EAEpBJ,SAAS,CAAC,YAAM;IAAA,IAAA,cAAA;IACd,IAAMgB,OAAO,GAAGC,cAAc,CAACX,IAAI,CAACK,OAAO,CAAC;IAG5C,CAAA,cAAA,GAAA,KAAK,CAACA,OAAO,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,cAAA,CAAeO,iBAAiB,CAACF,OAAO,CAAW;EACrD,CAAC,EAAE,CAACV,IAAI,CAACK,OAAO,CAAC,CAAC;EAElB,OAAOH,SAAS,CAACG,OAAO;AAC1B","sourcesContent":["import type { RefObject } from 'react';\nimport { useEffect, useRef } from 'react';\n\nimport type Animated from '../../index'; // TODO: fixme?\nimport type { ScrollEvent } from './useAnimatedScrollHandler';\nimport type { SharedValue } from '../commonTypes';\nimport { findNodeHandle } from 'react-native';\nimport { useEvent } from './utils';\nimport { useSharedValue } from './useSharedValue';\n\nconst scrollEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n\nexport function useScrollViewOffset(\n  aref: RefObject<Animated.ScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number> {\n  const offsetRef = useRef(\n    initialRef !== undefined ? initialRef : useSharedValue(0)\n  );\n\n  const event = useEvent<ScrollEvent>((event: ScrollEvent) => {\n    'worklet';\n    offsetRef.current.value =\n      event.contentOffset.x === 0\n        ? event.contentOffset.y\n        : event.contentOffset.x;\n  }, scrollEventNames);\n\n  useEffect(() => {\n    const viewTag = findNodeHandle(aref.current);\n    // @ts-ignore TODO TYPESCRIPT This happens because of\n    // how we had to type `useEvent` to get rid of .d.ts file.\n    event.current?.registerForEvents(viewTag as number);\n  }, [aref.current]);\n\n  return offsetRef.current;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}