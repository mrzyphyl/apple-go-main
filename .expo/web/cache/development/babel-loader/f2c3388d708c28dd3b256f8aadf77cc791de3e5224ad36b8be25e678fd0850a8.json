{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { withTiming } from \"../../animation\";\nimport { LayoutAnimationType, SharedTransitionType } from \"../animationBuilder/commonTypes\";\nimport { ReduceMotion } from \"../../commonTypes\";\nimport { configureLayoutAnimations } from \"../../core\";\nimport { ProgressTransitionManager } from \"./ProgressTransitionManager\";\nvar SUPPORTED_PROPS = ['width', 'height', 'originX', 'originY', 'transform', 'borderRadius'];\nexport var SharedTransition = function () {\n  function SharedTransition() {\n    _classCallCheck(this, SharedTransition);\n    _defineProperty(this, \"_customAnimationFactory\", null);\n    _defineProperty(this, \"_animation\", null);\n    _defineProperty(this, \"_transitionDuration\", 500);\n    _defineProperty(this, \"_reduceMotion\", ReduceMotion.System);\n    _defineProperty(this, \"_customProgressAnimation\", undefined);\n    _defineProperty(this, \"_progressAnimation\", undefined);\n    _defineProperty(this, \"_defaultTransitionType\", undefined);\n  }\n  _createClass(SharedTransition, [{\n    key: \"custom\",\n    value: function custom(customAnimationFactory) {\n      this._customAnimationFactory = customAnimationFactory;\n      return this;\n    }\n  }, {\n    key: \"progressAnimation\",\n    value: function progressAnimation(progressAnimationCallback) {\n      this._customProgressAnimation = function (viewTag, values, progress) {\n        'worklet';\n\n        var newStyles = progressAnimationCallback(values, progress);\n        _notifyAboutProgress(viewTag, newStyles, true);\n      };\n      return this;\n    }\n  }, {\n    key: \"duration\",\n    value: function duration(_duration) {\n      this._transitionDuration = _duration;\n      return this;\n    }\n  }, {\n    key: \"reduceMotion\",\n    value: function reduceMotion(_reduceMotion) {\n      this._reduceMotion = _reduceMotion;\n      return this;\n    }\n  }, {\n    key: \"defaultTransitionType\",\n    value: function defaultTransitionType(transitionType) {\n      this._defaultTransitionType = transitionType;\n      return this;\n    }\n  }, {\n    key: \"registerTransition\",\n    value: function registerTransition(viewTag, sharedTransitionTag) {\n      var transitionAnimation = this.getTransitionAnimation();\n      var progressAnimation = this.getProgressAnimation();\n      if (!this._defaultTransitionType) {\n        if (this._customAnimationFactory && !this._customProgressAnimation) {\n          this._defaultTransitionType = SharedTransitionType.ANIMATION;\n        } else {\n          this._defaultTransitionType = SharedTransitionType.PROGRESS_ANIMATION;\n        }\n      }\n      var layoutAnimationType = this._defaultTransitionType === SharedTransitionType.ANIMATION ? LayoutAnimationType.SHARED_ELEMENT_TRANSITION : LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS;\n      configureLayoutAnimations(viewTag, layoutAnimationType, transitionAnimation, sharedTransitionTag);\n      SharedTransition._progressTransitionManager.addProgressAnimation(viewTag, progressAnimation);\n    }\n  }, {\n    key: \"unregisterTransition\",\n    value: function unregisterTransition(viewTag) {\n      SharedTransition._progressTransitionManager.removeProgressAnimation(viewTag);\n    }\n  }, {\n    key: \"getReduceMotion\",\n    value: function getReduceMotion() {\n      return this._reduceMotion;\n    }\n  }, {\n    key: \"getTransitionAnimation\",\n    value: function getTransitionAnimation() {\n      if (!this._animation) {\n        this.buildAnimation();\n      }\n      return this._animation;\n    }\n  }, {\n    key: \"getProgressAnimation\",\n    value: function getProgressAnimation() {\n      if (!this._progressAnimation) {\n        this.buildProgressAnimation();\n      }\n      return this._progressAnimation;\n    }\n  }, {\n    key: \"buildAnimation\",\n    value: function buildAnimation() {\n      var animationFactory = this._customAnimationFactory;\n      var transitionDuration = this._transitionDuration;\n      var reduceMotion = this._reduceMotion;\n      this._animation = function (values) {\n        'worklet';\n\n        var animations = {};\n        var initialValues = {};\n        if (animationFactory) {\n          animations = animationFactory(values);\n          for (var key in animations) {\n            if (!SUPPORTED_PROPS.includes(key)) {\n              throw new Error(\"[Reanimated] The prop '\" + key + \"' is not supported yet.\");\n            }\n          }\n        } else {\n          for (var _i = 0, _SUPPORTED_PROPS = SUPPORTED_PROPS; _i < _SUPPORTED_PROPS.length; _i++) {\n            var propName = _SUPPORTED_PROPS[_i];\n            if (propName === 'transform') {\n              var matrix = values.targetTransformMatrix;\n              animations.transformMatrix = withTiming(matrix, {\n                reduceMotion: reduceMotion,\n                duration: transitionDuration\n              });\n            } else {\n              var capitalizedPropName = \"\" + propName.charAt(0).toUpperCase() + propName.slice(1);\n              var keyToTargetValue = \"target\" + capitalizedPropName;\n              animations[propName] = withTiming(values[keyToTargetValue], {\n                reduceMotion: reduceMotion,\n                duration: transitionDuration\n              });\n            }\n          }\n        }\n        for (var _propName in animations) {\n          if (_propName === 'transform') {\n            initialValues.transformMatrix = values.currentTransformMatrix;\n          } else {\n            var _capitalizedPropName = _propName.charAt(0).toUpperCase() + _propName.slice(1);\n            var keyToCurrentValue = \"current\" + _capitalizedPropName;\n            initialValues[_propName] = values[keyToCurrentValue];\n          }\n        }\n        return {\n          initialValues: initialValues,\n          animations: animations\n        };\n      };\n    }\n  }, {\n    key: \"buildProgressAnimation\",\n    value: function buildProgressAnimation() {\n      if (this._customProgressAnimation) {\n        this._progressAnimation = this._customProgressAnimation;\n        return;\n      }\n      this._progressAnimation = function (viewTag, values, progress) {\n        'worklet';\n\n        var newStyles = {};\n        for (var _i2 = 0, _SUPPORTED_PROPS2 = SUPPORTED_PROPS; _i2 < _SUPPORTED_PROPS2.length; _i2++) {\n          var propertyName = _SUPPORTED_PROPS2[_i2];\n          if (propertyName === 'transform') {\n            var currentMatrix = values.currentTransformMatrix;\n            var targetMatrix = values.targetTransformMatrix;\n            var newMatrix = new Array(9);\n            for (var i = 0; i < 9; i++) {\n              newMatrix[i] = progress * (targetMatrix[i] - currentMatrix[i]) + currentMatrix[i];\n            }\n            newStyles.transformMatrix = newMatrix;\n          } else {\n            var PropertyName = propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n            var currentPropertyName = \"current\" + PropertyName;\n            var targetPropertyName = \"target\" + PropertyName;\n            var currentValue = values[currentPropertyName];\n            var targetValue = values[targetPropertyName];\n            newStyles[propertyName] = progress * (targetValue - currentValue) + currentValue;\n          }\n        }\n        _notifyAboutProgress(viewTag, newStyles, true);\n      };\n    }\n  }], [{\n    key: \"custom\",\n    value: function custom(customAnimationFactory) {\n      return new SharedTransition().custom(customAnimationFactory);\n    }\n  }, {\n    key: \"duration\",\n    value: function duration(_duration2) {\n      return new SharedTransition().duration(_duration2);\n    }\n  }, {\n    key: \"progressAnimation\",\n    value: function progressAnimation(progressAnimationCallback) {\n      return new SharedTransition().progressAnimation(progressAnimationCallback);\n    }\n  }, {\n    key: \"defaultTransitionType\",\n    value: function defaultTransitionType(transitionType) {\n      return new SharedTransition().defaultTransitionType(transitionType);\n    }\n  }, {\n    key: \"reduceMotion\",\n    value: function reduceMotion(_reduceMotion) {\n      return new SharedTransition().reduceMotion(_reduceMotion);\n    }\n  }]);\n  return SharedTransition;\n}();\n_defineProperty(SharedTransition, \"_progressTransitionManager\", new ProgressTransitionManager());","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\layoutReanimation\\sharedTransitions\\SharedTransition.ts"],"names":["withTiming","LayoutAnimationType","SharedTransitionType","ReduceMotion","configureLayoutAnimations","ProgressTransitionManager","SUPPORTED_PROPS","SharedTransition","constructor","_defineProperty","System","undefined","custom","customAnimationFactory","_customAnimationFactory","progressAnimation","progressAnimationCallback","_customProgressAnimation","viewTag","values","progress","newStyles","_notifyAboutProgress","duration","_transitionDuration","reduceMotion","_reduceMotion","defaultTransitionType","transitionType","_defaultTransitionType","registerTransition","sharedTransitionTag","transitionAnimation","getTransitionAnimation","getProgressAnimation","ANIMATION","PROGRESS_ANIMATION","layoutAnimationType","SHARED_ELEMENT_TRANSITION","SHARED_ELEMENT_TRANSITION_PROGRESS","_progressTransitionManager","addProgressAnimation","unregisterTransition","removeProgressAnimation","getReduceMotion","_animation","buildAnimation","_progressAnimation","buildProgressAnimation","animationFactory","transitionDuration","animations","initialValues","key","includes","Error","propName","matrix","targetTransformMatrix","transformMatrix","capitalizedPropName","charAt","toUpperCase","slice","keyToTargetValue","currentTransformMatrix","keyToCurrentValue","propertyName","currentMatrix","targetMatrix","newMatrix","Array","i","PropertyName","currentPropertyName","targetPropertyName","currentValue","targetValue"],"mappings":"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","sourcesContent":["import { withTiming } from '../../animation';\nimport type {\n  SharedTransitionAnimationsFunction,\n  SharedTransitionAnimationsValues,\n  CustomProgressAnimation,\n  ProgressAnimation,\n  LayoutAnimationsOptions,\n} from '../animationBuilder/commonTypes';\nimport {\n  LayoutAnimationType,\n  SharedTransitionType,\n} from '../animationBuilder/commonTypes';\nimport type { StyleProps } from '../../commonTypes';\nimport { ReduceMotion } from '../../commonTypes';\nimport { configureLayoutAnimations } from '../../core';\nimport { ProgressTransitionManager } from './ProgressTransitionManager';\n\nconst SUPPORTED_PROPS = [\n  'width',\n  'height',\n  'originX',\n  'originY',\n  'transform',\n  'borderRadius',\n] as const;\n\ntype AnimationFactory = (\n  values: SharedTransitionAnimationsValues\n) => StyleProps;\n\nexport class SharedTransition {\n  private _customAnimationFactory: AnimationFactory | null = null;\n  private _animation: SharedTransitionAnimationsFunction | null = null;\n  private _transitionDuration = 500;\n  private _reduceMotion: ReduceMotion = ReduceMotion.System;\n  private _customProgressAnimation?: ProgressAnimation = undefined;\n  private _progressAnimation?: ProgressAnimation = undefined;\n  private _defaultTransitionType?: SharedTransitionType = undefined;\n  private static _progressTransitionManager = new ProgressTransitionManager();\n\n  public custom(customAnimationFactory: AnimationFactory): SharedTransition {\n    this._customAnimationFactory = customAnimationFactory;\n    return this;\n  }\n\n  public progressAnimation(\n    progressAnimationCallback: CustomProgressAnimation\n  ): SharedTransition {\n    this._customProgressAnimation = (viewTag, values, progress) => {\n      'worklet';\n      const newStyles = progressAnimationCallback(values, progress);\n      _notifyAboutProgress(viewTag, newStyles, true);\n    };\n    return this;\n  }\n\n  public duration(duration: number): SharedTransition {\n    this._transitionDuration = duration;\n    return this;\n  }\n\n  public reduceMotion(_reduceMotion: ReduceMotion): this {\n    this._reduceMotion = _reduceMotion;\n    return this;\n  }\n\n  public defaultTransitionType(\n    transitionType: SharedTransitionType\n  ): SharedTransition {\n    this._defaultTransitionType = transitionType;\n    return this;\n  }\n\n  public registerTransition(\n    viewTag: number,\n    sharedTransitionTag: string\n  ): void {\n    const transitionAnimation = this.getTransitionAnimation();\n    const progressAnimation = this.getProgressAnimation();\n    if (!this._defaultTransitionType) {\n      if (this._customAnimationFactory && !this._customProgressAnimation) {\n        this._defaultTransitionType = SharedTransitionType.ANIMATION;\n      } else {\n        this._defaultTransitionType = SharedTransitionType.PROGRESS_ANIMATION;\n      }\n    }\n    const layoutAnimationType =\n      this._defaultTransitionType === SharedTransitionType.ANIMATION\n        ? LayoutAnimationType.SHARED_ELEMENT_TRANSITION\n        : LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS;\n    configureLayoutAnimations(\n      viewTag,\n      layoutAnimationType,\n      transitionAnimation,\n      sharedTransitionTag\n    );\n    SharedTransition._progressTransitionManager.addProgressAnimation(\n      viewTag,\n      progressAnimation\n    );\n  }\n\n  public unregisterTransition(viewTag: number): void {\n    SharedTransition._progressTransitionManager.removeProgressAnimation(\n      viewTag\n    );\n  }\n\n  public getReduceMotion(): ReduceMotion {\n    return this._reduceMotion;\n  }\n\n  private getTransitionAnimation(): SharedTransitionAnimationsFunction {\n    if (!this._animation) {\n      this.buildAnimation();\n    }\n    return this._animation!;\n  }\n\n  private getProgressAnimation(): ProgressAnimation {\n    if (!this._progressAnimation) {\n      this.buildProgressAnimation();\n    }\n    return this._progressAnimation!;\n  }\n\n  private buildAnimation() {\n    const animationFactory = this._customAnimationFactory;\n    const transitionDuration = this._transitionDuration;\n    const reduceMotion = this._reduceMotion;\n    this._animation = (values: SharedTransitionAnimationsValues) => {\n      'worklet';\n      let animations: {\n        [key: string]: any;\n      } = {};\n      const initialValues: {\n        [key: string]: any;\n      } = {};\n\n      if (animationFactory) {\n        animations = animationFactory(values);\n        for (const key in animations) {\n          if (!(SUPPORTED_PROPS as readonly string[]).includes(key)) {\n            throw new Error(\n              `[Reanimated] The prop '${key}' is not supported yet.`\n            );\n          }\n        }\n      } else {\n        for (const propName of SUPPORTED_PROPS) {\n          if (propName === 'transform') {\n            const matrix = values.targetTransformMatrix;\n            animations.transformMatrix = withTiming(matrix, {\n              reduceMotion,\n              duration: transitionDuration,\n            });\n          } else {\n            const capitalizedPropName = `${propName\n              .charAt(0)\n              .toUpperCase()}${propName.slice(\n              1\n            )}` as Capitalize<LayoutAnimationsOptions>;\n            const keyToTargetValue = `target${capitalizedPropName}` as const;\n            animations[propName] = withTiming(values[keyToTargetValue], {\n              reduceMotion,\n              duration: transitionDuration,\n            });\n          }\n        }\n      }\n\n      for (const propName in animations) {\n        if (propName === 'transform') {\n          initialValues.transformMatrix = values.currentTransformMatrix;\n        } else {\n          const capitalizedPropName = (propName.charAt(0).toUpperCase() +\n            propName.slice(1)) as Capitalize<LayoutAnimationsOptions>;\n          const keyToCurrentValue = `current${capitalizedPropName}` as const;\n          initialValues[propName] = values[keyToCurrentValue];\n        }\n      }\n\n      return { initialValues, animations };\n    };\n  }\n\n  private buildProgressAnimation() {\n    if (this._customProgressAnimation) {\n      this._progressAnimation = this._customProgressAnimation;\n      return;\n    }\n    this._progressAnimation = (viewTag, values, progress) => {\n      'worklet';\n      const newStyles: { [key: string]: number | number[] } = {};\n      for (const propertyName of SUPPORTED_PROPS) {\n        if (propertyName === 'transform') {\n          // this is not the perfect solution, but at this moment it just interpolates the whole\n          // matrix instead of interpolating scale, translate, rotate, etc. separately\n          const currentMatrix = values.currentTransformMatrix as number[];\n          const targetMatrix = values.targetTransformMatrix as number[];\n          const newMatrix = new Array(9);\n          for (let i = 0; i < 9; i++) {\n            newMatrix[i] =\n              progress * (targetMatrix[i] - currentMatrix[i]) +\n              currentMatrix[i];\n          }\n          newStyles.transformMatrix = newMatrix;\n        } else {\n          // PropertyName == propertyName with capitalized fist letter, (width -> Width)\n          const PropertyName = (propertyName.charAt(0).toUpperCase() +\n            propertyName.slice(1)) as Capitalize<LayoutAnimationsOptions>;\n          const currentPropertyName = `current${PropertyName}` as const;\n          const targetPropertyName = `target${PropertyName}` as const;\n\n          const currentValue = values[currentPropertyName];\n          const targetValue = values[targetPropertyName];\n\n          newStyles[propertyName] =\n            progress * (targetValue - currentValue) + currentValue;\n        }\n      }\n      _notifyAboutProgress(viewTag, newStyles, true);\n    };\n  }\n\n  // static builder methods\n\n  public static custom(\n    customAnimationFactory: AnimationFactory\n  ): SharedTransition {\n    return new SharedTransition().custom(customAnimationFactory);\n  }\n\n  public static duration(duration: number): SharedTransition {\n    return new SharedTransition().duration(duration);\n  }\n\n  public static progressAnimation(\n    progressAnimationCallback: CustomProgressAnimation\n  ): SharedTransition {\n    return new SharedTransition().progressAnimation(progressAnimationCallback);\n  }\n\n  public static defaultTransitionType(\n    transitionType: SharedTransitionType\n  ): SharedTransition {\n    return new SharedTransition().defaultTransitionType(transitionType);\n  }\n\n  public static reduceMotion(_reduceMotion: ReduceMotion): SharedTransition {\n    return new SharedTransition().reduceMotion(_reduceMotion);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}