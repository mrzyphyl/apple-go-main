{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors;\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n    drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n    drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n          name: route.name,\n          merge: true\n        })), {}, {\n          target: state.key\n        }));\n      }\n    };\n    var _descriptors$route$ke = descriptors[route.key].options,\n      title = _descriptors$route$ke.title,\n      drawerLabel = _descriptors$route$ke.drawerLabel,\n      drawerIcon = _descriptors$route$ke.drawerIcon,\n      drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n      drawerItemStyle = _descriptors$route$ke.drawerItemStyle,\n      drawerAllowFontScaling = _descriptors$route$ke.drawerAllowFontScaling;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerItemList.tsx"],"names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","closeDrawer","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","undefined","params"],"mappings":";;;AAAA,SACEA,aAAa,EACbC,aAAa,EAGbC,cAAc,QACT,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAG9B,OAAOC,UAAU;AAWjB,eAAe,SAASC,cAAc,CAAA,IAAA,EAI5B;EAJ6B,IACrCC,KAAK,GAGC,IAAA,CAHNA,KAAK;IACLC,UAAU,GAEJ,IAAA,CAFNA,UAAU;IACVC,WAAAA,GACM,IAAA,CADNA,WAAAA;EAEA,IAAMC,SAAS,GAAGP,cAAc,CAAA,CAAE;EAElC,IAAMQ,YAAY,GAAGJ,KAAK,CAACK,MAAM,CAACL,KAAK,CAACM,KAAK,CAAC;EAC9C,IAAMC,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAG,CAAC;EACvD,IAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAO;EAEhD,IACEC,qBAAqB,GAInBF,cAAc,CAJhBE,qBAAqB;IACrBC,uBAAuB,GAGrBH,cAAc,CAHhBG,uBAAuB;IACvBC,2BAA2B,GAEzBJ,cAAc,CAFhBI,2BAA2B;IAC3BC,6BAAAA,GACEL,cAAc,CADhBK,6BAAAA;EAGF,OAAOd,KAAK,CAACK,MAAM,CAACU,GAAG,CAAC,UAACC,KAAK,EAAEC,CAAC,EAAK;IACpC,IAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAAK;IAEjC,IAAMa,OAAO,GAAG,SAAVA,OAAO,CAAA,EAAS;MACpB,IAAMC,KAAK,GAAGnB,UAAU,CAACoB,IAAI,CAAC;QAC5BC,IAAI,EAAE,iBAAiB;QACvBC,MAAM,EAAEP,KAAK,CAACR,GAAG;QACjBgB,iBAAiB,EAAE;MACrB,CAAC,CAAC;MAEF,IAAI,CAACJ,KAAK,CAACK,gBAAgB,EAAE;QAC3BxB,UAAU,CAACyB,QAAQ,CAAA,aAAA,CAAA,aAAA,KACbR,OAAO,GACPvB,aAAa,CAACgC,WAAW,CAAA,CAAE,GAC3BjC,aAAa,CAACkC,QAAQ,CAAC;UAAEC,IAAI,EAAEb,KAAK,CAACa,IAAI;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;UAC7DP,MAAM,EAAEvB,KAAK,CAACQ;QAAAA,EACf,CAAC;MACJ;IACF,CAAC;IAED,IAAA,qBAAA,GAOIN,WAAW,CAACc,KAAK,CAACR,GAAG,CAAC,CAACE,OAAO;MANhCqB,KAAK,GAAA,qBAAA,CAALA,KAAK;MACLC,WAAW,GAAA,qBAAA,CAAXA,WAAW;MACXC,UAAU,GAAA,qBAAA,CAAVA,UAAU;MACVC,gBAAgB,GAAA,qBAAA,CAAhBA,gBAAgB;MAChBC,eAAe,GAAA,qBAAA,CAAfA,eAAe;MACfC,sBAAAA,GAAAA,qBAAAA,CAAAA,sBAAAA;IAGF,OACE,KAAA,CAAA,aAAA,CAAC,UAAU,EAAA;MACT,GAAG,EAAEpB,KAAK,CAACR,GAAI;MACf,KAAK,EACHwB,WAAW,KAAKK,SAAS,GACrBL,WAAW,GACXD,KAAK,KAAKM,SAAS,GACnBN,KAAK,GACLf,KAAK,CAACa,IACX;MACD,IAAI,EAAEI,UAAW;MACjB,OAAO,EAAEf,OAAQ;MACjB,eAAe,EAAEP,qBAAsB;MACvC,iBAAiB,EAAEC,uBAAwB;MAC3C,qBAAqB,EAAEC,2BAA4B;MACnD,uBAAuB,EAAEC,6BAA8B;MACvD,gBAAgB,EAAEsB,sBAAuB;MACzC,UAAU,EAAEF,gBAAiB;MAC7B,KAAK,EAAEC,eAAgB;MACvB,EAAE,EAAEhC,SAAS,CAACa,KAAK,CAACa,IAAI,EAAEb,KAAK,CAACsB,MAAM,CAAE;MACxC,OAAO,EAAEnB;IAAQ,CAAA,CACjB;EAEN,CAAC,CAAC;AACJ","sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}