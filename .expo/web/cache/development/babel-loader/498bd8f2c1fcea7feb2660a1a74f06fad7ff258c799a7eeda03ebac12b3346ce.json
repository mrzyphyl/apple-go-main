{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport JSReanimated from \"./JSReanimated\";\nimport { isWeb } from \"../PlatformChecker\";\nvar createReactDOMStyle;\nvar createTransformValue;\nvar createTextShadowValue;\nif (isWeb()) {\n  try {\n    createReactDOMStyle = require('react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle').default;\n  } catch (e) {}\n  try {\n    createTransformValue = require('react-native-web/dist/exports/StyleSheet/preprocess').createTransformValue;\n  } catch (e) {}\n  try {\n    createTextShadowValue = require('react-native-web/dist/exports/StyleSheet/preprocess').createTextShadowValue;\n  } catch (e) {}\n}\nvar reanimatedJS = new JSReanimated();\nglobal._makeShareableClone = function () {\n  throw new Error('[Reanimated] _makeShareableClone should never be called in JSReanimated.');\n};\nglobal._scheduleOnJS = function () {\n  throw new Error('[Reanimated] _scheduleOnJS should never be called in JSReanimated.');\n};\nexport var _updatePropsJS = function _updatePropsJS(updates, viewRef, isAnimatedProps) {\n  if (viewRef._component) {\n    var component = viewRef._component;\n    var _Object$keys$reduce = Object.keys(updates).reduce(function (acc, key) {\n        var value = updates[key];\n        var index = typeof value === 'function' ? 1 : 0;\n        acc[index][key] = value;\n        return acc;\n      }, [{}, {}]),\n      _Object$keys$reduce2 = _slicedToArray(_Object$keys$reduce, 1),\n      rawStyles = _Object$keys$reduce2[0];\n    if (typeof component.setNativeProps === 'function') {\n      setNativeProps(component, rawStyles, isAnimatedProps);\n    } else if (createReactDOMStyle !== undefined && component.style !== undefined) {\n      updatePropsDOM(component, rawStyles, isAnimatedProps);\n    } else if (Object.keys(component.props).length > 0) {\n      Object.keys(component.props).forEach(function (key) {\n        if (!rawStyles[key]) {\n          return;\n        }\n        var dashedKey = key.replace(/[A-Z]/g, function (m) {\n          return '-' + m.toLowerCase();\n        });\n        component._touchableNode.setAttribute(dashedKey, rawStyles[key]);\n      });\n    } else {\n      console.warn('It is not possible to manipulate component');\n    }\n  }\n};\nvar setNativeProps = function setNativeProps(component, newProps, isAnimatedProps) {\n  var _component$setNativeP2;\n  if (isAnimatedProps) {\n    var _component$setNativeP;\n    (_component$setNativeP = component.setNativeProps) === null || _component$setNativeP === void 0 ? void 0 : _component$setNativeP.call(component, newProps);\n    return;\n  }\n  var previousStyle = component.previousStyle ? component.previousStyle : {};\n  var currentStyle = _objectSpread(_objectSpread({}, previousStyle), newProps);\n  component.previousStyle = currentStyle;\n  (_component$setNativeP2 = component.setNativeProps) === null || _component$setNativeP2 === void 0 ? void 0 : _component$setNativeP2.call(component, {\n    style: currentStyle\n  });\n};\nvar updatePropsDOM = function updatePropsDOM(component, style, isAnimatedProps) {\n  var previousStyle = component.previousStyle ? component.previousStyle : {};\n  var currentStyle = _objectSpread(_objectSpread({}, previousStyle), style);\n  component.previousStyle = currentStyle;\n  var domStyle = createReactDOMStyle(currentStyle);\n  if (Array.isArray(domStyle.transform) && createTransformValue !== undefined) {\n    domStyle.transform = createTransformValue(domStyle.transform);\n  }\n  if (createTextShadowValue !== undefined && (domStyle.textShadowColor || domStyle.textShadowRadius || domStyle.textShadowOffset)) {\n    domStyle.textShadow = createTextShadowValue({\n      textShadowColor: domStyle.textShadowColor,\n      textShadowOffset: domStyle.textShadowOffset,\n      textShadowRadius: domStyle.textShadowRadius\n    });\n  }\n  for (var key in domStyle) {\n    if (isAnimatedProps) {\n      component.setAttribute(key, domStyle[key]);\n    } else {\n      component.style[key] = domStyle[key];\n    }\n  }\n};\nexport default reanimatedJS;","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\js-reanimated\\index.ts"],"names":["JSReanimated","isWeb","createReactDOMStyle","createTransformValue","createTextShadowValue","require","default","e","reanimatedJS","global","_makeShareableClone","Error","_scheduleOnJS","_updatePropsJS","updates","viewRef","isAnimatedProps","_component","component","rawStyles","Object","keys","reduce","acc","key","value","index","setNativeProps","undefined","style","updatePropsDOM","props","length","forEach","dashedKey","replace","m","toLowerCase","_touchableNode","setAttribute","console","warn","newProps","previousStyle","currentStyle","domStyle","Array","isArray","transform","textShadowColor","textShadowRadius","textShadowOffset","textShadow"],"mappings":"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","sourcesContent":["import JSReanimated from './JSReanimated';\nimport type { StyleProps } from '../commonTypes';\nimport type { AnimatedStyle } from '../helperTypes';\nimport { isWeb } from '../PlatformChecker';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet createReactDOMStyle: (style: any) => any;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet createTransformValue: (transform: any) => any;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet createTextShadowValue: (style: any) => void | string;\n\nif (isWeb()) {\n  try {\n    createReactDOMStyle =\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      require('react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle').default;\n  } catch (e) {}\n\n  try {\n    // React Native Web 0.19+\n    createTransformValue =\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      require('react-native-web/dist/exports/StyleSheet/preprocess').createTransformValue;\n  } catch (e) {}\n\n  try {\n    createTextShadowValue =\n      require('react-native-web/dist/exports/StyleSheet/preprocess').createTextShadowValue;\n  } catch (e) {}\n}\n\nconst reanimatedJS = new JSReanimated();\n\nglobal._makeShareableClone = () => {\n  throw new Error(\n    '[Reanimated] _makeShareableClone should never be called in JSReanimated.'\n  );\n};\n\nglobal._scheduleOnJS = () => {\n  throw new Error(\n    '[Reanimated] _scheduleOnJS should never be called in JSReanimated.'\n  );\n};\n\ninterface JSReanimatedComponent {\n  previousStyle: StyleProps;\n  setNativeProps?: (style: StyleProps) => void;\n  style?: StyleProps;\n  props: Record<string, string | number>;\n  _touchableNode: {\n    setAttribute: (key: string, props: unknown) => void;\n  };\n}\n\nexport const _updatePropsJS = (\n  updates: StyleProps | AnimatedStyle<any>,\n  viewRef: { _component?: JSReanimatedComponent },\n  isAnimatedProps?: boolean\n): void => {\n  if (viewRef._component) {\n    const component = viewRef._component;\n    const [rawStyles] = Object.keys(updates).reduce(\n      (acc: [StyleProps, AnimatedStyle<any>], key) => {\n        const value = updates[key];\n        const index = typeof value === 'function' ? 1 : 0;\n        acc[index][key] = value;\n        return acc;\n      },\n      [{}, {}]\n    );\n\n    if (typeof component.setNativeProps === 'function') {\n      // This is the legacy way to update props on React Native Web <= 0.18.\n      // Also, some components (e.g. from react-native-svg) don't have styles\n      // and always provide setNativeProps function instead (even on React Native Web 0.19+).\n      setNativeProps(component, rawStyles, isAnimatedProps);\n    } else if (\n      createReactDOMStyle !== undefined &&\n      component.style !== undefined\n    ) {\n      // React Native Web 0.19+ no longer provides setNativeProps function,\n      // so we need to update DOM nodes directly.\n      updatePropsDOM(component, rawStyles, isAnimatedProps);\n    } else if (Object.keys(component.props).length > 0) {\n      Object.keys(component.props).forEach((key) => {\n        if (!rawStyles[key]) {\n          return;\n        }\n        const dashedKey = key.replace(/[A-Z]/g, (m) => '-' + m.toLowerCase());\n        component._touchableNode.setAttribute(dashedKey, rawStyles[key]);\n      });\n    } else {\n      console.warn('It is not possible to manipulate component');\n    }\n  }\n};\n\nconst setNativeProps = (\n  component: JSReanimatedComponent,\n  newProps: StyleProps,\n  isAnimatedProps?: boolean\n): void => {\n  if (isAnimatedProps) {\n    component.setNativeProps?.(newProps);\n    return;\n  }\n\n  const previousStyle = component.previousStyle ? component.previousStyle : {};\n  const currentStyle = { ...previousStyle, ...newProps };\n  component.previousStyle = currentStyle;\n\n  component.setNativeProps?.({ style: currentStyle });\n};\n\nconst updatePropsDOM = (\n  component: JSReanimatedComponent | HTMLElement,\n  style: StyleProps,\n  isAnimatedProps?: boolean\n): void => {\n  const previousStyle = (component as JSReanimatedComponent).previousStyle\n    ? (component as JSReanimatedComponent).previousStyle\n    : {};\n  const currentStyle = { ...previousStyle, ...style };\n  (component as JSReanimatedComponent).previousStyle = currentStyle;\n\n  const domStyle = createReactDOMStyle(currentStyle);\n  if (Array.isArray(domStyle.transform) && createTransformValue !== undefined) {\n    domStyle.transform = createTransformValue(domStyle.transform);\n  }\n\n  if (\n    createTextShadowValue !== undefined &&\n    (domStyle.textShadowColor ||\n      domStyle.textShadowRadius ||\n      domStyle.textShadowOffset)\n  ) {\n    domStyle.textShadow = createTextShadowValue({\n      textShadowColor: domStyle.textShadowColor,\n      textShadowOffset: domStyle.textShadowOffset,\n      textShadowRadius: domStyle.textShadowRadius,\n    });\n  }\n\n  for (const key in domStyle) {\n    if (isAnimatedProps) {\n      (component as HTMLElement).setAttribute(key, domStyle[key]);\n    } else {\n      (component.style as StyleProps)[key] = domStyle[key];\n    }\n  }\n};\n\nexport default reanimatedJS;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}