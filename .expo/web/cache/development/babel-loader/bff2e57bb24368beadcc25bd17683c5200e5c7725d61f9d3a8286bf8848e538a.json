{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"colors\", \"locations\", \"startPoint\", \"endPoint\"];\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\nexport default function NativeLinearGradient(_ref) {\n  var colors = _ref.colors,\n    locations = _ref.locations,\n    startPoint = _ref.startPoint,\n    endPoint = _ref.endPoint,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    layout = _React$useState2[0],\n    setLayout = _React$useState2[1];\n  var _React$useState3 = React.useState([]),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    gradientColors = _React$useState4[0],\n    setGradientColors = _React$useState4[1];\n  var _React$useState5 = React.useState(0),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    pseudoAngle = _React$useState6[0],\n    setPseudoAngle = _React$useState6[1];\n  var _ref2 = layout != null ? layout : {},\n    _ref2$width = _ref2.width,\n    width = _ref2$width === void 0 ? 1 : _ref2$width,\n    _ref2$height = _ref2.height,\n    height = _ref2$height === void 0 ? 1 : _ref2$height;\n  React.useEffect(function () {\n    var getControlPoints = function getControlPoints() {\n      var correctedStartPoint = [0, 0];\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [startPoint[0] != null ? startPoint[0] : 0.0, startPoint[1] != null ? startPoint[1] : 0.0];\n      }\n      var correctedEndPoint = [0.0, 1.0];\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [endPoint[0] != null ? endPoint[0] : 0.0, endPoint[1] != null ? endPoint[1] : 1.0];\n      }\n      return [correctedStartPoint, correctedEndPoint];\n    };\n    var _getControlPoints = getControlPoints(),\n      _getControlPoints2 = _slicedToArray(_getControlPoints, 2),\n      start = _getControlPoints2[0],\n      end = _getControlPoints2[1];\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    var py = end[1] - start[1];\n    var px = end[0] - start[0];\n    setPseudoAngle(90 + Math.atan2(py, px) * 180 / Math.PI);\n  }, [width, height, startPoint, endPoint]);\n  React.useEffect(function () {\n    var nextGradientColors = colors.map(function (color, index) {\n      var hexColor = normalizeColor(color);\n      var output = hexColor;\n      if (locations && locations[index]) {\n        var location = Math.max(0, Math.min(1, locations[index]));\n        var percentage = location * 100;\n        output += \" \" + percentage + \"%\";\n      }\n      return output;\n    });\n    setGradientColors(nextGradientColors);\n  }, [colors, locations]);\n  var colorStyle = gradientColors.join(',');\n  var backgroundImage = \"linear-gradient(\" + pseudoAngle + \"deg, \" + colorStyle + \")\";\n  return React.createElement(View, _extends({}, props, {\n    style: [props.style, {\n      backgroundImage: backgroundImage\n    }],\n    onLayout: function onLayout(event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n        x = _event$nativeEvent$la.x,\n        y = _event$nativeEvent$la.y,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n      var oldLayout = layout != null ? layout : {\n        x: 0,\n        y: 0,\n        width: 1,\n        height: 1\n      };\n      if (x !== oldLayout.x || y !== oldLayout.y || width !== oldLayout.width || height !== oldLayout.height) {\n        setLayout({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        });\n      }\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    }\n  }));\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\expo-linear-gradient\\src\\NativeLinearGradient.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { LayoutRectangle, View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\n\nimport { NativeLinearGradientPoint, NativeLinearGradientProps } from './NativeLinearGradient.types';\n\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: NativeLinearGradientProps): React.ReactElement {\n  const [layout, setLayout] = React.useState<LayoutRectangle | null>(null);\n  const [gradientColors, setGradientColors] = React.useState<string[]>([]);\n  const [pseudoAngle, setPseudoAngle] = React.useState<number>(0);\n\n  const { width = 1, height = 1 } = layout ?? {};\n  React.useEffect(() => {\n    const getControlPoints = (): NativeLinearGradientPoint[] => {\n      let correctedStartPoint: NativeLinearGradientPoint = [0, 0];\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [\n          startPoint[0] != null ? startPoint[0] : 0.0,\n          startPoint[1] != null ? startPoint[1] : 0.0,\n        ];\n      }\n      let correctedEndPoint: NativeLinearGradientPoint = [0.0, 1.0];\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [\n          endPoint[0] != null ? endPoint[0] : 0.0,\n          endPoint[1] != null ? endPoint[1] : 1.0,\n        ];\n      }\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n\n    setPseudoAngle(90 + (Math.atan2(py, px) * 180) / Math.PI);\n  }, [width, height, startPoint, endPoint]);\n\n  React.useEffect(() => {\n    const nextGradientColors = colors.map((color: number, index: number): string => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index]));\n        // Convert 0...1 to 0...100\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n      return output;\n    });\n\n    setGradientColors(nextGradientColors);\n  }, [colors, locations]);\n\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`;\n  // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage },\n      ]}\n      onLayout={event => {\n        const { x, y, width, height } = event.nativeEvent.layout;\n        const oldLayout = layout ?? { x: 0, y: 0, width: 1, height: 1 };\n        // don't set new layout state unless the layout has actually changed\n        if (\n          x !== oldLayout.x ||\n          y !== oldLayout.y ||\n          width !== oldLayout.width ||\n          height !== oldLayout.height\n        ) {\n          setLayout({ x, y, width, height });\n        }\n\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}