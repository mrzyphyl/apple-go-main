{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { isJest } from \"./PlatformChecker\";\nimport { runOnUI } from \"./threads\";\nimport { isSharedValue } from \"./utils\";\nvar IS_JEST = isJest();\nfunction createMapperRegistry() {\n  'worklet';\n\n  var mappers = new Map();\n  var sortedMappers = [];\n  var runRequested = false;\n  var processingMappers = false;\n  function updateMappersOrder() {\n    var pre = new Map();\n    mappers.forEach(function (mapper) {\n      if (mapper.outputs) {\n        for (var _iterator = _createForOfIteratorHelperLoose(mapper.outputs), _step; !(_step = _iterator()).done;) {\n          var output = _step.value;\n          var preMappers = pre.get(output);\n          if (preMappers === undefined) {\n            pre.set(output, [mapper]);\n          } else {\n            preMappers.push(mapper);\n          }\n        }\n      }\n    });\n    var visited = new Set();\n    var newOrder = [];\n    function dfs(mapper) {\n      visited.add(mapper);\n      for (var _iterator2 = _createForOfIteratorHelperLoose(mapper.inputs), _step2; !(_step2 = _iterator2()).done;) {\n        var input = _step2.value;\n        var preMappers = pre.get(input);\n        if (preMappers) {\n          for (var _iterator3 = _createForOfIteratorHelperLoose(preMappers), _step3; !(_step3 = _iterator3()).done;) {\n            var preMapper = _step3.value;\n            if (!visited.has(preMapper)) {\n              dfs(preMapper);\n            }\n          }\n        }\n      }\n      newOrder.push(mapper);\n    }\n    mappers.forEach(function (mapper) {\n      if (!visited.has(mapper)) {\n        dfs(mapper);\n      }\n    });\n    sortedMappers = newOrder;\n  }\n  function mapperRun() {\n    runRequested = false;\n    if (processingMappers) {\n      return;\n    }\n    processingMappers = true;\n    if (mappers.size !== sortedMappers.length) {\n      updateMappersOrder();\n    }\n    for (var _iterator4 = _createForOfIteratorHelperLoose(sortedMappers), _step4; !(_step4 = _iterator4()).done;) {\n      var mapper = _step4.value;\n      if (mapper.dirty) {\n        mapper.dirty = false;\n        mapper.worklet();\n      }\n    }\n    processingMappers = false;\n  }\n  function maybeRequestUpdates() {\n    if (IS_JEST) {\n      mapperRun();\n    } else if (!runRequested) {\n      if (processingMappers) {\n        requestAnimationFrame(mapperRun);\n      } else {\n        queueMicrotask(mapperRun);\n      }\n      runRequested = true;\n    }\n  }\n  function extractInputs(inputs, resultArray) {\n    if (Array.isArray(inputs)) {\n      for (var _iterator5 = _createForOfIteratorHelperLoose(inputs), _step5; !(_step5 = _iterator5()).done;) {\n        var input = _step5.value;\n        input && extractInputs(input, resultArray);\n      }\n    } else if (isSharedValue(inputs)) {\n      resultArray.push(inputs);\n    } else if (Object.getPrototypeOf(inputs) === Object.prototype) {\n      for (var _i = 0, _Object$values = Object.values(inputs); _i < _Object$values.length; _i++) {\n        var element = _Object$values[_i];\n        element && extractInputs(element, resultArray);\n      }\n    }\n    return resultArray;\n  }\n  return {\n    start: function start(mapperID, worklet, inputs, outputs) {\n      var mapper = {\n        id: mapperID,\n        dirty: true,\n        worklet: worklet,\n        inputs: extractInputs(inputs, []),\n        outputs: outputs\n      };\n      mappers.set(mapper.id, mapper);\n      sortedMappers = [];\n      for (var _iterator6 = _createForOfIteratorHelperLoose(mapper.inputs), _step6; !(_step6 = _iterator6()).done;) {\n        var sv = _step6.value;\n        sv.addListener(mapper.id, function () {\n          mapper.dirty = true;\n          maybeRequestUpdates();\n        });\n      }\n      maybeRequestUpdates();\n    },\n    stop: function stop(mapperID) {\n      var mapper = mappers.get(mapperID);\n      if (mapper) {\n        mappers.delete(mapper.id);\n        sortedMappers = [];\n        for (var _iterator7 = _createForOfIteratorHelperLoose(mapper.inputs), _step7; !(_step7 = _iterator7()).done;) {\n          var sv = _step7.value;\n          sv.removeListener(mapper.id);\n        }\n      }\n    }\n  };\n}\nvar MAPPER_ID = 9999;\nexport function startMapper(worklet) {\n  var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var outputs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var mapperID = MAPPER_ID += 1;\n  runOnUI(function () {\n    var mapperRegistry = global.__mapperRegistry;\n    if (mapperRegistry === undefined) {\n      mapperRegistry = global.__mapperRegistry = createMapperRegistry();\n    }\n    mapperRegistry.start(mapperID, worklet, inputs, outputs);\n  })();\n  return mapperID;\n}\nexport function stopMapper(mapperID) {\n  runOnUI(function () {\n    var mapperRegistry = global.__mapperRegistry;\n    mapperRegistry === null || mapperRegistry === void 0 ? void 0 : mapperRegistry.stop(mapperID);\n  })();\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\mappers.ts"],"names":["isJest","runOnUI","isSharedValue","IS_JEST","createMapperRegistry","mappers","Map","sortedMappers","runRequested","processingMappers","updateMappersOrder","pre","forEach","mapper","outputs","output","preMappers","get","undefined","set","push","visited","Set","newOrder","dfs","add","input","inputs","preMapper","has","mapperRun","size","length","dirty","worklet","maybeRequestUpdates","requestAnimationFrame","queueMicrotask","extractInputs","resultArray","Array","isArray","Object","getPrototypeOf","prototype","element","values","start","mapperID","id","sv","addListener","stop","delete","removeListener","MAPPER_ID","startMapper","mapperRegistry","global","__mapperRegistry","stopMapper"],"mappings":"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","sourcesContent":["import type { SharedValue } from './commonTypes';\nimport { isJest } from './PlatformChecker';\nimport { runOnUI } from './threads';\nimport { isSharedValue } from './utils';\n\nconst IS_JEST = isJest();\n\ntype Mapper = {\n  id: number;\n  dirty: boolean;\n  worklet: () => void;\n  inputs: SharedValue<any>[];\n  outputs?: SharedValue<any>[];\n};\n\nfunction createMapperRegistry() {\n  'worklet';\n  const mappers = new Map();\n  let sortedMappers: Mapper[] = [];\n\n  let runRequested = false;\n  let processingMappers = false;\n\n  function updateMappersOrder() {\n    // sort mappers topologically\n    // the algorithm here takes adventage of a fact that the topological order\n    // of a transposed graph is a reverse topological order of the original graph\n    // The graph in our case consists of mappers and an edge between two mappers\n    // A and B exists if there is a shared value that's on A's output lists and on\n    // B's input list.\n    //\n    // We don't need however to calculate that graph as it is easier to work with\n    // the transposed version of it that can be calculated ad-hoc. For the transposed\n    // version to be traversed we use \"pre\" map that maps share value to mappers that\n    // output that shared value. Then we can infer all the outgoing edges for a given\n    // mapper simply by scanning it's input list and checking if any of the shared values\n    // from that list exists in the \"pre\" map. If they do, then we have an edge between\n    // that mapper and the mappers from the \"pre\" list for the given shared value.\n    //\n    // For topological sorting we use a dfs-based approach that requires the graph to\n    // be traversed in dfs order and each node after being processed lands at the\n    // beginning of the topological order list. Since we traverse a transposed graph,\n    // instead of reversing that order we can use a normal array and push processed\n    // mappers to the end. There is no need to reverse that array after we are done.\n    const pre = new Map(); // map from sv -> mapper that outputs that sv\n    mappers.forEach((mapper) => {\n      if (mapper.outputs) {\n        for (const output of mapper.outputs) {\n          const preMappers = pre.get(output);\n          if (preMappers === undefined) {\n            pre.set(output, [mapper]);\n          } else {\n            preMappers.push(mapper);\n          }\n        }\n      }\n    });\n    const visited = new Set();\n    const newOrder: Mapper[] = [];\n    function dfs(mapper: Mapper) {\n      visited.add(mapper);\n      for (const input of mapper.inputs) {\n        const preMappers = pre.get(input);\n        if (preMappers) {\n          for (const preMapper of preMappers) {\n            if (!visited.has(preMapper)) {\n              dfs(preMapper);\n            }\n          }\n        }\n      }\n      newOrder.push(mapper);\n    }\n    mappers.forEach((mapper) => {\n      if (!visited.has(mapper)) {\n        dfs(mapper);\n      }\n    });\n    sortedMappers = newOrder;\n  }\n\n  function mapperRun() {\n    runRequested = false;\n    if (processingMappers) {\n      return;\n    }\n    processingMappers = true;\n    if (mappers.size !== sortedMappers.length) {\n      updateMappersOrder();\n    }\n    for (const mapper of sortedMappers) {\n      if (mapper.dirty) {\n        mapper.dirty = false;\n        mapper.worklet();\n      }\n    }\n    processingMappers = false;\n  }\n\n  function maybeRequestUpdates() {\n    if (IS_JEST) {\n      // On Jest environment we avoid using queueMicrotask as that'd require test\n      // to advance the clock manually. This on other hand would require tests\n      // to know how many times mappers need to run. As we don't want tests to\n      // make any assumptions on that number it is easier to execute mappers\n      // immediately for testing purposes and only expect test to advance timers\n      // if they want to make any assertions on the effects of animations being run.\n      mapperRun();\n    } else if (!runRequested) {\n      if (processingMappers) {\n        // In general, we should avoid having mappers trigger updates as this may\n        // result in unpredictable behavior. Specifically, the updated value can\n        // be read by mappers that run later in the same frame but previous mappers\n        // would access the old value. Updating mappers during the mapper-run phase\n        // breaks the order in which we should execute the mappers. However, doing\n        // that is still a possibility and there are some instances where people use\n        // the API in that way, hence we need to prevent mapper-run phase falling into\n        // an infinite loop. We do that by detecting when mapper-run is requested while\n        // we are already in mapper-run phase, and in that case we use `requestAnimationFrame`\n        // instead of `queueMicrotask` which will schedule mapper run for the next\n        // frame instead of queuing another set of updates in the same frame.\n        requestAnimationFrame(mapperRun);\n      } else {\n        queueMicrotask(mapperRun);\n      }\n      runRequested = true;\n    }\n  }\n\n  function extractInputs(\n    inputs: any,\n    resultArray: SharedValue<any>[]\n  ): SharedValue<any>[] {\n    if (Array.isArray(inputs)) {\n      for (const input of inputs) {\n        input && extractInputs(input, resultArray);\n      }\n    } else if (isSharedValue(inputs)) {\n      resultArray.push(inputs);\n    } else if (Object.getPrototypeOf(inputs) === Object.prototype) {\n      // we only extract inputs recursively from \"plain\" objects here, if object\n      // is of a derivative class (e.g. HostObject on web, or Map) we don't scan\n      // it recursively\n      for (const element of Object.values(inputs)) {\n        element && extractInputs(element, resultArray);\n      }\n    }\n    return resultArray;\n  }\n\n  return {\n    start: (\n      mapperID: number,\n      worklet: () => void,\n      inputs: SharedValue<any>[],\n      outputs?: SharedValue<any>[]\n    ) => {\n      const mapper = {\n        id: mapperID,\n        dirty: true,\n        worklet,\n        inputs: extractInputs(inputs, []),\n        outputs,\n      };\n      mappers.set(mapper.id, mapper);\n      sortedMappers = [];\n      for (const sv of mapper.inputs) {\n        sv.addListener(mapper.id, () => {\n          mapper.dirty = true;\n          maybeRequestUpdates();\n        });\n      }\n      maybeRequestUpdates();\n    },\n    stop: (mapperID: number) => {\n      const mapper = mappers.get(mapperID);\n      if (mapper) {\n        mappers.delete(mapper.id);\n        sortedMappers = [];\n        for (const sv of mapper.inputs) {\n          sv.removeListener(mapper.id);\n        }\n      }\n    },\n  };\n}\n\nlet MAPPER_ID = 9999;\n\nexport function startMapper(\n  worklet: () => void,\n  inputs: any[] = [],\n  outputs: any[] = []\n): number {\n  const mapperID = (MAPPER_ID += 1);\n\n  runOnUI(() => {\n    let mapperRegistry = global.__mapperRegistry;\n    if (mapperRegistry === undefined) {\n      mapperRegistry = global.__mapperRegistry = createMapperRegistry();\n    }\n    mapperRegistry.start(mapperID, worklet, inputs, outputs);\n  })();\n\n  return mapperID;\n}\n\nexport function stopMapper(mapperID: number): void {\n  runOnUI(() => {\n    const mapperRegistry = global.__mapperRegistry;\n    mapperRegistry?.stop(mapperID);\n  })();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}