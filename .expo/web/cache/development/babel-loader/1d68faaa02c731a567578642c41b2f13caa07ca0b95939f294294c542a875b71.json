{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createAnimatedCallFunc } from \"./AnimatedCallFunc\";\nimport { createAnimatedParam } from \"./AnimatedParam\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\nvar AnimatedFunction = function (_AnimatedNode) {\n  _inherits(AnimatedFunction, _AnimatedNode);\n  var _super = _createSuper(AnimatedFunction);\n  function AnimatedFunction(what) {\n    var _this;\n    _classCallCheck(this, AnimatedFunction);\n    invariant(what instanceof AnimatedNode, \"Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got \".concat(what));\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n    _this = _super.call(this, {\n      type: 'func',\n      what: what\n    }, [what].concat(params));\n    _defineProperty(_assertThisInitialized(_this), \"_what\", void 0);\n    _this._what = what;\n    _this.__attach();\n    return _this;\n  }\n  _createClass(AnimatedFunction, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return val(this._what);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedFunction, id: \".concat(this.__nodeID);\n    }\n  }]);\n  return AnimatedFunction;\n}(AnimatedNode);\nexport function createAnimatedFunction(cb) {\n  var params = new Array(cb.length);\n  for (var i = 0; i < params.length; i++) {\n    params[i] = createAnimatedParam();\n  }\n  var what = cb.apply(void 0, params);\n  var func = _construct(AnimatedFunction, [what].concat(params));\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (args.length !== params.length) {\n      throw new Error('Parameter mismatch when calling reanimated function. Expected ' + params.length + ' parameters, got ' + args.length + '.');\n    }\n    return createAnimatedCallFunc(func, args, params);\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\core\\AnimatedFunction.js"],"names":["AnimatedNode","createAnimatedCallFunc","createAnimatedParam","val","invariant","AnimatedFunction","constructor","what","params","type","_what","__attach","__onEvaluate","toString","__nodeID","createAnimatedFunction","cb","Array","length","i","func","args","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP;AACA,SAASC,sBAAT;AACA,SAASC,mBAAT;AACA,SAASC,GAAT;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAAA,IAEMC,gBAAN,aAAA,aAAA;EAAA,SAAA,CAAA,gBAAA,EAAA,aAAA;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,gBAAA;EAGEC,SAAAA,iBAAYC,IAAD,EAAkB;IAAA,IAAA,KAAA;IAAA,eAAA,OAAA,gBAAA;IAC3BH,SAAS,CACPG,IAAI,YAAYP,YADT,EAAA,sFAAA,CAAA,MAAA,CAEgFO,IAFhF,CAAA,CAATH;IAAAA,SAAAA,IAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EADmBI,MAAV,OAAA,KAAA,CAAA,IAAA,OAAA,IAAA,WAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;MAAUA,MAAV,CAAA,IAAA,QAAA,SAAA,CAAA,IAAA;IAAA;IAKT,KAAA,GAAA,MAAA,CAAA,IAAA,OACE;MACEC,IAAI,EAAE,MADR;MAEEF,IAAAA,EAAAA;IAFF,CADF,GAKGA,IAAD,EAAA,MAAA,CAAUC,MALZ;IAL2B,eAAA,CAAA,sBAAA,CAAA,KAAA,GAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IAY3B,KAAA,CAAKE,KAAL,GAAaH,IAAb;IACA,KAAA,CAAKI,QAAL,CAAA,CAAA;IAAA,OAAA,KAAA;EACD;EAAA,YAAA,CAAA,gBAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,aAAAA,EAAe;MACb,OAAOT,GAAG,CAAC,IAAA,CAAKO,KAAN,CAAV;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDG,SAAAA,SAAAA,EAAW;MACT,OAAA,wBAAA,CAAA,MAAA,CAAgC,IAAA,CAAKC,QAArC,CAAA;IACD;EAAA;EAAA,OAAA,gBAAA;AAAA,EAzB4Bd,YAA/B;AA4BA,OAAO,SAASe,sBAAT,CAAgCC,EAAhC,EAAoC;EACzC,IAAMR,MAAM,GAAG,IAAIS,KAAJ,CAAUD,EAAE,CAACE,MAAb,CAAf;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,MAAM,CAACU,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;IACtCX,MAAM,CAACW,CAAD,CAANX,GAAYN,mBAAmB,CAAA,CAA/BM;EAHuC;EAMzC,IAAMD,IAAI,GAAGS,EAAE,CAAA,KAAA,SAAIR,MAAJ,CAAf;EACA,IAAMY,IAAI,GAAA,UAAA,CAAOf,gBAAJ,GAAqBE,IAArB,EAAA,MAAA,CAA8BC,MAA9B,EAAb;EACA,OAAO,YAAa;IAAA,SAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAATa,IAAJ,OAAA,KAAA,CAAA,KAAA,GAAA,KAAA,MAAA,KAAA,GAAA,KAAA,EAAA,KAAA;MAAIA,IAAJ,CAAA,KAAA,IAAA,SAAA,CAAA,KAAA;IAAA;IACL,IAAIA,IAAI,CAACH,MAALG,KAAgBb,MAAM,CAACU,MAA3B,EAAmC;MACjC,MAAM,IAAII,KAAJ,CACJ,gEAAA,GACEd,MAAM,CAACU,MADT,GAEE,mBAFF,GAGEG,IAAI,CAACH,MAHP,GAIE,GALE,CAAN;IAOD;IACD,OAAOjB,sBAAsB,CAACmB,IAAD,EAAOC,IAAP,EAAab,MAAb,CAA7B;EACD,CAXD;AAYD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { createAnimatedCallFunc } from './AnimatedCallFunc';\nimport { createAnimatedParam } from './AnimatedParam';\nimport { val } from '../val';\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedFunction extends AnimatedNode {\n  _what;\n\n  constructor(what, ...params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    super(\n      {\n        type: 'func',\n        what,\n      },\n      [what, ...params]\n    );\n    this._what = what;\n    this.__attach();\n  }\n\n  __onEvaluate() {\n    return val(this._what);\n  }\n\n  toString() {\n    return `AnimatedFunction, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedFunction(cb) {\n  const params = new Array(cb.length);\n  for (let i = 0; i < params.length; i++) {\n    params[i] = createAnimatedParam();\n  }\n  // eslint-disable-next-line standard/no-callback-literal\n  const what = cb(...params);\n  const func = new AnimatedFunction(what, ...params);\n  return (...args) => {\n    if (args.length !== params.length) {\n      throw new Error(\n        'Parameter mismatch when calling reanimated function. Expected ' +\n          params.length +\n          ' parameters, got ' +\n          args.length +\n          '.'\n      );\n    }\n    return createAnimatedCallFunc(func, args, params);\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}