{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    _classCallCheck(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n    _this.getDrawerWidth = function () {\n      var _this$props = _this.props,\n        drawerStyle = _this$props.drawerStyle,\n        dimensions = _this$props.dimensions;\n      var _ref4 = StyleSheet.flatten(drawerStyle) || {},\n        _ref4$width = _ref4.width,\n        width = _ref4$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref4$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    };\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.initialDrawerWidth = _this.getDrawerWidth();\n    _this.gestureState = new Value(GestureState.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n    _this.containerWidth = new Value(_this.props.dimensions.width);\n    _this.drawerWidth = new Value(_this.initialDrawerWidth);\n    _this.drawerOpacity = new Value(_this.props.drawerType === 'permanent' ? 1 : 0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value(_this.props.swipeDistanceThreshold);\n    _this.swipeVelocityThreshold = new Value(_this.props.swipeVelocityThreshold);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref5 = _slicedToArray(_ref, 1),\n          value = _ref5[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {\n      var _ref6 = _slicedToArray(_ref2, 1),\n        value = _ref6[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref3) {\n      var _ref7 = _slicedToArray(_ref3, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    };\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    };\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props2 = _this.props,\n        hideStatusBar = _this$props2.hideStatusBarOnOpen,\n        statusBarAnimation = _this$props2.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    };\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        open = _this$props3.open,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n        hideStatusBar = _this$props3.hideStatusBarOnOpen;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        swipeEnabled = _this$props4.swipeEnabled,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n        drawerStyle = _this$props4.drawerStyle,\n        overlayStyle = _this$props4.overlayStyle,\n        renderDrawerContent = _this$props4.renderDrawerContent,\n        renderSceneContent = _this$props4.renderSceneContent,\n        gestureHandlerProps = _this$props4.gestureHandlerProps,\n        overlayAccessibilityLabel = _this$props4.overlayAccessibilityLabel;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: progress\n      }, React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: contentTranslateX\n          }]\n        }]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(Overlay, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        accessibilityLabel: overlayAccessibilityLabel,\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\@react-navigation\\drawer\\src\\views\\legacy\\Drawer.tsx"],"names":["React","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","Component","componentDidUpdate","prevProps","open","drawerPosition","drawerType","swipeDistanceThreshold","swipeVelocityThreshold","hideStatusBarOnOpen","hideStatusBar","props","pendingOpenValue","toggleDrawer","undefined","toggleStatusBar","setValue","isDrawerTypeFront","componentWillUnmount","handleEndInteraction","interactionHandle","InteractionManager","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","drawerStyle","dimensions","width","StyleSheet","flatten","endsWith","percentage","Number","replace","isFinite","clock","isOpen","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","dragX","onOpen","onClose","forceUpdate","keyboardDismissMode","Keyboard","dismiss","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleContainerLayout","e","layout","handleDrawerLayout","requestAnimationFrame","hidden","statusBarAnimation","StatusBar","setHidden","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","overlayAccessibilityLabel","isRight","contentTranslateX","drawerTranslateX","I18nManager","getConstants","isRTL","offset","hitSlop","right","left","styles","main","flexDirection","content","transform","Platform","OS","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.getConstants().isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.getConstants().isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    accessibilityLabel={overlayAccessibilityLabel}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}