{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"itemLayoutAnimation\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { Component, forwardRef } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { AnimatedView } from \"./View\";\nimport createAnimatedComponent from \"../../createAnimatedComponent/createAnimatedComponent\";\nvar AnimatedFlatList = createAnimatedComponent(FlatList);\nvar createCellRenderer = function createCellRenderer(itemLayoutAnimation, cellStyle) {\n  var cellRenderer = function cellRenderer(props) {\n    return React.createElement(AnimatedView, {\n      layout: itemLayoutAnimation,\n      onLayout: props.onLayout,\n      style: cellStyle\n    }, props.children);\n  };\n  return cellRenderer;\n};\nexport var ReanimatedFlatList = forwardRef(function (props, ref) {\n  var itemLayoutAnimation = props.itemLayoutAnimation,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var cellStyle = restProps !== null && restProps !== void 0 && restProps.inverted ? restProps !== null && restProps !== void 0 && restProps.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : undefined;\n  if (!('scrollEventThrottle' in restProps)) {\n    restProps.scrollEventThrottle = 1;\n  }\n  var cellRenderer = React.useMemo(function () {\n    return createCellRenderer(itemLayoutAnimation, cellStyle);\n  }, [cellStyle]);\n  return React.createElement(AnimatedFlatList, _extends({\n    ref: ref\n  }, restProps, {\n    CellRendererComponent: cellRenderer\n  }));\n});\nvar styles = StyleSheet.create({\n  verticallyInverted: {\n    transform: [{\n      scaleY: -1\n    }]\n  },\n  horizontallyInverted: {\n    transform: [{\n      scaleX: -1\n    }]\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\component\\FlatList.tsx"],"names":["React","Component","forwardRef","AnimatedView","createAnimatedComponent","AnimatedFlatList","FlatList","createCellRenderer","itemLayoutAnimation","cellStyle","cellRenderer","props","layout","onLayout","style","children","ReanimatedFlatList","ref","restProps","inverted","horizontal","styles","horizontallyInverted","verticallyInverted","undefined","scrollEventThrottle","useMemo","CellRendererComponent","StyleSheet","create","transform","scaleY","scaleX"],"mappings":";;;;;;;;;;;;;;;;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAA,OAAA,QAAA;AAAA,OAAA,UAAA;AAGpD,SAASC,YAAY;AACrB,OAAOC,uBAAuB;AAK9B,IAAMC,gBAAgB,GAAGD,uBAAuB,CAACE,QAAQ,CAAe;AAUxE,IAAMC,kBAAkB,GAAGA,SAArBA,kBAAkB,CACtBC,mBAA6C,EAC7CC,SAAsB,EACnB;EACH,IAAMC,YAAY,GAAIC,SAAhBD,YAAY,CAAIC,KAA4B,EAAK;IACrD,OACEX,KAAAA,CAAAA,aAAAA,CAACG,YAAAA,EACC;MACAS,MAAM,EAAEJ,mBAA2B;MACnCK,QAAQ,EAAEF,KAAK,CAACE,QAAS;MACzBC,KAAK,EAAEL;IAAU,CAAA,EAChBE,KAAK,CAACI,QAAQ,CACF;EAEnB,CAAC;EAED,OAAOL,YAAY;AACrB,CAAC;AAmBD,OAAO,IAAMM,kBAAkB,GAAGd,UAAU,CAC1C,UAACS,KAAmC,EAAEM,GAA2B,EAAK;EACpE,IAAQT,mBAAmB,GAAmBG,KAAK,CAA3CH,mBAAmB;IAAKU,SAAAA,GAAAA,wBAAAA,CAAcP,KAAK,EAAA,SAAA;EAEnD,IAAMF,SAAS,GAAGS,SAAS,KAAA,IAAA,IAATA,SAAS,KAAA,KAAA,CAAA,IAATA,SAAS,CAAEC,QAAQ,GACjCD,SAAS,KAAA,IAAA,IAATA,SAAS,KAAA,KAAA,CAAA,IAATA,SAAS,CAAEE,UAAU,GACnBC,MAAM,CAACC,oBAAoB,GAC3BD,MAAM,CAACE,kBAAkB,GAC3BC,SAAS;EAOb,IAAI,EAAE,qBAAqB,IAAIN,SAAS,CAAC,EAAE;IACzCA,SAAS,CAACO,mBAAmB,GAAG,CAAC;EACnC;EAEA,IAAMf,YAAY,GAAGV,KAAK,CAAC0B,OAAO,CAChC;IAAA,OAAMnB,kBAAkB,CAACC,mBAAmB,EAAEC,SAAS,CAAC;EAAA,GACxD,CAACA,SAAS,CAAC,CACZ;EAED,OACET,KAAAA,CAAAA,aAAAA,CAACK,gBAAgB,EAAA,QAAA,CAAA;IACfY,GAAG,EAAEA;EAAI,CAAA,EACLC,SAAS,EAAA;IACbS,qBAAqB,EAAEjB;EAAa,CAAA,CAAA,CACpC;AAEN,CAAC,CACoC;AAEvC,IAAMW,MAAM,GAAGO,UAAU,CAACC,MAAM,CAAC;EAC/BN,kBAAkB,EAAE;IAAEO,SAAS,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;IAAE,CAAC;EAAE,CAAC;EACnDT,oBAAoB,EAAE;IAAEQ,SAAS,EAAE,CAAC;MAAEE,MAAM,EAAE,CAAC;IAAE,CAAC;EAAE;AACtD,CAAC,CAAC","sourcesContent":["import type { ForwardedRef } from 'react';\nimport React, { Component, forwardRef } from 'react';\nimport type { FlatListProps, LayoutChangeEvent } from 'react-native';\nimport { FlatList, StyleSheet } from 'react-native';\nimport { AnimatedView } from './View';\nimport createAnimatedComponent from '../../createAnimatedComponent/createAnimatedComponent';\nimport type { ILayoutAnimationBuilder } from '../layoutReanimation/animationBuilder/commonTypes';\nimport type { StyleProps } from '../commonTypes';\nimport type { AnimateProps } from '../helperTypes';\n\nconst AnimatedFlatList = createAnimatedComponent(FlatList as any) as any;\n\ninterface AnimatedFlatListProps {\n  onLayout: (event: LayoutChangeEvent) => void;\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children: React.ReactNode;\n  inverted?: boolean;\n  horizontal?: boolean;\n}\n\nconst createCellRenderer = (\n  itemLayoutAnimation?: ILayoutAnimationBuilder,\n  cellStyle?: StyleProps\n) => {\n  const cellRenderer = (props: AnimatedFlatListProps) => {\n    return (\n      <AnimatedView\n        // TODO TYPESCRIPT This is temporary cast is to get rid of .d.ts file.\n        layout={itemLayoutAnimation as any}\n        onLayout={props.onLayout}\n        style={cellStyle}>\n        {props.children}\n      </AnimatedView>\n    );\n  };\n\n  return cellRenderer;\n};\n\ninterface ReanimatedFlatListPropsWithLayout<T> extends FlatListProps<T> {\n  itemLayoutAnimation?: ILayoutAnimationBuilder;\n}\n\nexport type FlatListPropsWithLayout<T> = ReanimatedFlatListPropsWithLayout<T>;\n\n// TODO TYPESCRIPT This is a temporary type to get rid of .d.ts file.\ndeclare class ReanimatedFlatListClass<T> extends Component<\n  AnimateProps<ReanimatedFlatListPropsWithLayout<T>>\n> {\n  getNode(): FlatList;\n}\n\ninterface ReanimatedFlatListProps<ItemT> extends FlatListProps<ItemT> {\n  itemLayoutAnimation?: ILayoutAnimationBuilder;\n}\n\nexport const ReanimatedFlatList = forwardRef(\n  (props: ReanimatedFlatListProps<any>, ref: ForwardedRef<FlatList>) => {\n    const { itemLayoutAnimation, ...restProps } = props;\n\n    const cellStyle = restProps?.inverted\n      ? restProps?.horizontal\n        ? styles.horizontallyInverted\n        : styles.verticallyInverted\n      : undefined;\n\n    // Set default scrollEventThrottle, because user expects\n    // to have continuous scroll events and\n    // react-native defaults it to 50 for FlatLists.\n    // We set it to 1 so we have peace until\n    // there are 960 fps screens.\n    if (!('scrollEventThrottle' in restProps)) {\n      restProps.scrollEventThrottle = 1;\n    }\n\n    const cellRenderer = React.useMemo(\n      () => createCellRenderer(itemLayoutAnimation, cellStyle),\n      [cellStyle]\n    );\n\n    return (\n      <AnimatedFlatList\n        ref={ref}\n        {...restProps}\n        CellRendererComponent={cellRenderer}\n      />\n    );\n  }\n) as unknown as ReanimatedFlatList<any>;\n\nconst styles = StyleSheet.create({\n  verticallyInverted: { transform: [{ scaleY: -1 }] },\n  horizontallyInverted: { transform: [{ scaleX: -1 }] },\n});\n\nexport type ReanimatedFlatList<T> = typeof ReanimatedFlatListClass<T> &\n  FlatList<T>;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}