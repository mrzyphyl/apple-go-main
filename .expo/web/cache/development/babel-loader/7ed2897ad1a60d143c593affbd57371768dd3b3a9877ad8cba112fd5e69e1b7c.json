{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nvar AnimatedAlways = function (_AnimatedNode) {\n  _inherits(AnimatedAlways, _AnimatedNode);\n  var _super = _createSuper(AnimatedAlways);\n  function AnimatedAlways(what) {\n    var _this;\n    _classCallCheck(this, AnimatedAlways);\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.always node argument should be of type AnimatedNode but got \".concat(what));\n    _this = _super.call(this, {\n      type: 'always',\n      what: what\n    }, [what]);\n    _defineProperty(_assertThisInitialized(_this), \"_what\", void 0);\n    _this._what = what;\n    return _this;\n  }\n  _createClass(AnimatedAlways, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedAlways, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.__getValue();\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      val(this._what);\n      return 0;\n    }\n  }]);\n  return AnimatedAlways;\n}(AnimatedNode);\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\core\\AnimatedAlways.js"],"names":["AnimatedNode","invariant","val","AnimatedAlways","constructor","what","type","_what","toString","__nodeID","update","__getValue","__onEvaluate","createAnimatedAlways","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;AAAA,IAEMC,cAAN,aAAA,aAAA;EAAA,SAAA,CAAA,cAAA,EAAA,aAAA;EAAA,IAAA,MAAA,GAAA,YAAA,CAAA,cAAA;EAGEC,SAAAA,eAAYC,IAAD,EAAO;IAAA,IAAA,KAAA;IAAA,eAAA,OAAA,cAAA;IAChBJ,SAAS,CACPI,IAAI,YAAYL,YADT,EAAA,mFAAA,CAAA,MAAA,CAE6EK,IAF7E,CAAA,CAATJ;IAIA,KAAA,GAAA,MAAA,CAAA,IAAA,OAAM;MAAEK,IAAI,EAAE,QAAR;MAAkBD,IAAAA,EAAAA;IAAlB,CAAN,EAAgC,CAACA,IAAD,CAAhC;IALgB,eAAA,CAAA,sBAAA,CAAA,KAAA,GAAA,OAAA,EAAA,KAAA,CAAA,CAAA;IAMhB,KAAA,CAAKE,KAAL,GAAaF,IAAb;IAAA,OAAA,KAAA;EACD;EAAA,YAAA,CAAA,cAAA;IAAA,GAAA;IAAA,KAAA,EAEDG,SAAAA,SAAAA,EAAW;MACT,OAAA,sBAAA,CAAA,MAAA,CAA8B,IAAA,CAAKC,QAAnC,CAAA;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,OAAAA,EAAS;MACP,IAAA,CAAKC,UAAL,CAAA,CAAA;IACD;EAAA;IAAA,GAAA;IAAA,KAAA,EAEDC,SAAAA,aAAAA,EAAe;MACbV,GAAG,CAAC,IAAA,CAAKK,KAAN,CAAHL;MACA,OAAO,CAAP;IACD;EAAA;EAAA,OAAA,cAAA;AAAA,EAvB0BF,YAA7B;AA0BA,OAAO,SAASa,oBAAT,CAA8BC,IAA9B,EAAoC;EACzC,OAAO,IAAIX,cAAJ,CAAmBW,IAAnB,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\n\nclass AnimatedAlways extends AnimatedNode {\n  _what;\n\n  constructor(what) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.always node argument should be of type AnimatedNode but got ${what}`\n    );\n    super({ type: 'always', what }, [what]);\n    this._what = what;\n  }\n\n  toString() {\n    return `AnimatedAlways, id: ${this.__nodeID}`;\n  }\n\n  update() {\n    this.__getValue();\n  }\n\n  __onEvaluate() {\n    val(this._what);\n    return 0;\n  }\n}\n\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}