{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport WorkletEventHandler from \"../reanimated2/WorkletEventHandler\";\nimport setAndForwardRef from \"./setAndForwardRef\";\nimport \"../reanimated2/layoutReanimation/animationsManager\";\nimport invariant from 'invariant';\nimport { adaptViewConfig } from \"../ConfigHelper\";\nimport { RNRenderer } from \"../reanimated2/platform-specific/RNRenderer\";\nimport { configureLayoutAnimations, enableLayoutAnimations, startMapper, stopMapper } from \"../reanimated2/core\";\nimport { isJest, isChromeDebugger, shouldBeUseWeb, isWeb } from \"../reanimated2/PlatformChecker\";\nimport { initialUpdaterRun } from \"../reanimated2/animation\";\nimport { SharedTransition, LayoutAnimationType } from \"../reanimated2/layoutReanimation\";\nimport { makeViewDescriptorsSet } from \"../reanimated2/ViewDescriptorsSet\";\nimport { getShadowNodeWrapperFromRef } from \"../reanimated2/fabricUtils\";\nimport updateProps from \"../reanimated2/UpdateProps\";\nimport NativeReanimatedModule from \"../reanimated2/NativeReanimated\";\nimport { isSharedValue } from \"../reanimated2/utils\";\nimport { removeFromPropsRegistry } from \"../reanimated2/PropsRegistry\";\nimport { JSPropUpdater } from \"./JSPropUpdater\";\nimport { getReduceMotionFromConfig } from \"../reanimated2/animation/util\";\nimport { maybeBuild } from \"../animationBuilder\";\nimport { flattenArray, has } from \"./utils\";\nvar IS_WEB = isWeb();\nfunction dummyListener() {}\nfunction onlyAnimatedStyles(styles) {\n  return styles.filter(function (style) {\n    return style === null || style === void 0 ? void 0 : style.viewDescriptors;\n  });\n}\nfunction isSameAnimatedStyle(style1, style2) {\n  return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);\n}\nvar isSameAnimatedProps = isSameAnimatedStyle;\nfunction isInlineStyleTransform(transform) {\n  if (!transform) {\n    return false;\n  }\n  return transform.some(function (t) {\n    return hasInlineStyles(t);\n  });\n}\nfunction hasInlineStyles(style) {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some(function (key) {\n    var styleValue = style[key];\n    return isSharedValue(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);\n  });\n}\nfunction extractSharedValuesMapFromProps(props) {\n  var inlineProps = {};\n  for (var key in props) {\n    var value = props[key];\n    if (key === 'style') {\n      var _props$style;\n      var styles = flattenArray((_props$style = props.style) != null ? _props$style : []);\n      styles.forEach(function (style) {\n        if (!style) {\n          return;\n        }\n        for (var _i = 0, _Object$entries = Object.entries(style); _i < _Object$entries.length; _i++) {\n          var _ref3 = _Object$entries[_i];\n          var _ref4 = _slicedToArray(_ref3, 2);\n          var _key = _ref4[0];\n          var styleValue = _ref4[1];\n          if (isSharedValue(styleValue)) {\n            inlineProps[_key] = styleValue;\n          } else if (_key === 'transform' && isInlineStyleTransform(styleValue)) {\n            inlineProps[_key] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n  return inlineProps;\n}\nfunction inlinePropsHasChanged(styles1, styles2) {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n  for (var _i2 = 0, _Object$keys = Object.keys(styles1); _i2 < _Object$keys.length; _i2++) {\n    var key = _Object$keys[_i2];\n    if (styles1[key] !== styles2[key]) return true;\n  }\n  return false;\n}\nfunction getInlinePropsUpdate(inlineProps) {\n  'worklet';\n\n  var update = {};\n  for (var _i3 = 0, _Object$entries2 = Object.entries(inlineProps); _i3 < _Object$entries2.length; _i3++) {\n    var _ref5 = _Object$entries2[_i3];\n    var _ref6 = _slicedToArray(_ref5, 2);\n    var key = _ref6[0];\n    var styleValue = _ref6[1];\n    if (key === 'transform') {\n      update[key] = styleValue.map(function (transform) {\n        return getInlinePropsUpdate(transform);\n      });\n    } else if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\nexport default function createAnimatedComponent(Component, options) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, \"Looks like you're passing a function component `\" + Component.name + \"` to `createAnimatedComponent` function which supports only class components. Please wrap your function component with `React.forwardRef()` or use a class component instead.\");\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n    var _super = _createSuper(AnimatedComponent);\n    function AnimatedComponent(props) {\n      var _this;\n      _classCallCheck(this, AnimatedComponent);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"_styles\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_animatedProps\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"_viewTag\", -1);\n      _defineProperty(_assertThisInitialized(_this), \"_isFirstRender\", true);\n      _defineProperty(_assertThisInitialized(_this), \"animatedStyle\", {\n        value: {}\n      });\n      _defineProperty(_assertThisInitialized(_this), \"initialStyle\", {});\n      _defineProperty(_assertThisInitialized(_this), \"_component\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_inlinePropsViewDescriptors\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_inlinePropsMapperId\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_inlineProps\", {});\n      _defineProperty(_assertThisInitialized(_this), \"_sharedElementTransition\", null);\n      _defineProperty(_assertThisInitialized(_this), \"_JSPropUpdater\", new JSPropUpdater());\n      _defineProperty(_assertThisInitialized(_this), \"_setComponentRef\", setAndForwardRef({\n        getForwardedRef: function getForwardedRef() {\n          return _this.props.forwardedRef;\n        },\n        setLocalRef: function setLocalRef(ref) {\n          var tag = IS_WEB ? ref : findNodeHandle(ref);\n          var _this$props3 = _this.props,\n            layout = _this$props3.layout,\n            entering = _this$props3.entering,\n            exiting = _this$props3.exiting,\n            sharedTransitionTag = _this$props3.sharedTransitionTag;\n          if ((layout || entering || exiting || sharedTransitionTag) && tag != null) {\n            if (!shouldBeUseWeb()) {\n              enableLayoutAnimations(true, false);\n            }\n            if (layout) {\n              configureLayoutAnimations(tag, LayoutAnimationType.LAYOUT, maybeBuild(layout, undefined, AnimatedComponent.displayName));\n            }\n            if (entering) {\n              var _this$props;\n              configureLayoutAnimations(tag, LayoutAnimationType.ENTERING, maybeBuild(entering, (_this$props = _this.props) === null || _this$props === void 0 ? void 0 : _this$props.style, AnimatedComponent.displayName));\n            }\n            if (exiting) {\n              var reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n              if (!reduceMotionInExiting) {\n                var _this$props2;\n                configureLayoutAnimations(tag, LayoutAnimationType.EXITING, maybeBuild(exiting, (_this$props2 = _this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.style, AnimatedComponent.displayName));\n              }\n            }\n            if (sharedTransitionTag && !IS_WEB) {\n              var _this$props$sharedTra;\n              var sharedElementTransition = (_this$props$sharedTra = _this.props.sharedTransitionStyle) != null ? _this$props$sharedTra : new SharedTransition();\n              var reduceMotionInTransition = getReduceMotionFromConfig(sharedElementTransition.getReduceMotion());\n              if (!reduceMotionInTransition) {\n                sharedElementTransition.registerTransition(tag, sharedTransitionTag);\n                _this._sharedElementTransition = sharedElementTransition;\n              }\n            }\n          }\n          if (ref !== _this._component) {\n            _this._component = ref;\n          }\n        }\n      }));\n      if (isJest()) {\n        _this.animatedStyle = {\n          value: {}\n        };\n      }\n      return _this;\n    }\n    _createClass(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$_sharedElementT;\n        this._detachNativeEvents();\n        this._JSPropUpdater.removeOnJSPropsChangeListener(this);\n        this._detachStyles();\n        this._detachInlineProps();\n        (_this$_sharedElementT = this._sharedElementTransition) === null || _this$_sharedElementT === void 0 ? void 0 : _this$_sharedElementT.unregisterTransition(this._viewTag);\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this._attachNativeEvents();\n        this._JSPropUpdater.addOnJSPropsChangeListener(this);\n        this._attachAnimatedStyles();\n        this._attachInlineProps();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        var _this$_component, _getScrollableNode, _ref;\n        return (_this$_component = this._component) !== null && _this$_component !== void 0 && _this$_component.getScrollableNode ? (_getScrollableNode = (_ref = this._component).getScrollableNode) === null || _getScrollableNode === void 0 ? void 0 : _getScrollableNode.call(_ref) : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n        var viewTag = null;\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler) {\n            if (viewTag === null) {\n              viewTag = findNodeHandle(options !== null && options !== void 0 && options.setNativeProps ? this : node);\n            }\n            prop.current.registerForEvents(viewTag, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        for (var key in this.props) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n      }\n    }, {\n      key: \"_detachStyles\",\n      value: function _detachStyles() {\n        if (IS_WEB && this._styles !== null) {\n          for (var _iterator = _createForOfIteratorHelperLoose(this._styles), _step; !(_step = _iterator()).done;) {\n            var style = _step.value;\n            if (style !== null && style !== void 0 && style.viewsRef) {\n              style.viewsRef.remove(this);\n            }\n          }\n        } else if (this._viewTag !== -1 && this._styles !== null) {\n          var _this$props$animatedP;\n          for (var _iterator2 = _createForOfIteratorHelperLoose(this._styles), _step2; !(_step2 = _iterator2()).done;) {\n            var _style = _step2.value;\n            _style.viewDescriptors.remove(this._viewTag);\n          }\n          if ((_this$props$animatedP = this.props.animatedProps) !== null && _this$props$animatedP !== void 0 && _this$props$animatedP.viewDescriptors) {\n            this.props.animatedProps.viewDescriptors.remove(this._viewTag);\n          }\n          if (global._IS_FABRIC) {\n            removeFromPropsRegistry(this._viewTag);\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        for (var key in prevProps) {\n          var prop = this.props[key];\n          if (has('current', prop) && prop.current instanceof WorkletEventHandler && prop.current.reattachNeeded) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n        var viewTag = null;\n        for (var _key2 in this.props) {\n          var _prop = this.props[_key2];\n          if (has('current', _prop) && _prop.current instanceof WorkletEventHandler && _prop.current.reattachNeeded) {\n            if (viewTag === null) {\n              var node = this._getEventViewRef();\n              viewTag = findNodeHandle(options !== null && options !== void 0 && options.setNativeProps ? this : node);\n            }\n            _prop.current.registerForEvents(viewTag, _key2);\n            _prop.current.reattachNeeded = false;\n          }\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        if (options !== null && options !== void 0 && options.setNativeProps) {\n          options.setNativeProps(this._component, props);\n        } else {\n          var _this$_component2, _this$_component2$set;\n          (_this$_component2 = this._component) === null || _this$_component2 === void 0 ? void 0 : (_this$_component2$set = _this$_component2.setNativeProps) === null || _this$_component2$set === void 0 ? void 0 : _this$_component2$set.call(_this$_component2, props);\n        }\n      }\n    }, {\n      key: \"_getViewInfo\",\n      value: function _getViewInfo() {\n        var _this$_component3, _getAnimatableRef, _ref2;\n        var viewTag;\n        var viewName;\n        var shadowNodeWrapper = null;\n        var viewConfig;\n        var component = (_this$_component3 = this._component) !== null && _this$_component3 !== void 0 && _this$_component3.getAnimatableRef ? (_getAnimatableRef = (_ref2 = this._component).getAnimatableRef) === null || _getAnimatableRef === void 0 ? void 0 : _getAnimatableRef.call(_ref2) : this;\n        if (IS_WEB) {\n          viewTag = this._component;\n          viewName = null;\n          shadowNodeWrapper = null;\n          viewConfig = null;\n        } else {\n          var _hostInstance$viewCon;\n          var hostInstance = RNRenderer.findHostInstance_DEPRECATED(component);\n          if (!hostInstance) {\n            throw new Error('[Reanimated] Cannot find host instance for this component. Maybe it renders nothing?');\n          }\n          viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;\n          viewName = hostInstance === null || hostInstance === void 0 ? void 0 : (_hostInstance$viewCon = hostInstance.viewConfig) === null || _hostInstance$viewCon === void 0 ? void 0 : _hostInstance$viewCon.uiViewClassName;\n          viewConfig = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig;\n          if (global._IS_FABRIC) {\n            shadowNodeWrapper = getShadowNodeWrapperFromRef(this);\n          }\n        }\n        return {\n          viewTag: viewTag,\n          viewName: viewName,\n          shadowNodeWrapper: shadowNodeWrapper,\n          viewConfig: viewConfig\n        };\n      }\n    }, {\n      key: \"_attachAnimatedStyles\",\n      value: function _attachAnimatedStyles() {\n        var _this2 = this;\n        var _this$props$animatedP2, _this$props$animatedP3;\n        var styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];\n        var prevStyles = this._styles;\n        this._styles = styles;\n        var prevAnimatedProps = this._animatedProps;\n        this._animatedProps = this.props.animatedProps;\n        var _this$_getViewInfo = this._getViewInfo(),\n          viewTag = _this$_getViewInfo.viewTag,\n          viewName = _this$_getViewInfo.viewName,\n          shadowNodeWrapper = _this$_getViewInfo.shadowNodeWrapper,\n          viewConfig = _this$_getViewInfo.viewConfig;\n        var hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) === null || _this$props$animatedP2 === void 0 ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;\n        if (hasReanimated2Props && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n        this._viewTag = viewTag;\n        if (prevStyles) {\n          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && isSameAnimatedStyle(styles[0], prevStyles[0]);\n          if (!hasOneSameStyle) {\n            var _loop = function _loop(prevStyle) {\n              var isPresent = styles.some(function (style) {\n                return isSameAnimatedStyle(style, prevStyle);\n              });\n              if (!isPresent) {\n                prevStyle.viewDescriptors.remove(viewTag);\n              }\n            };\n            for (var _iterator3 = _createForOfIteratorHelperLoose(prevStyles), _step3; !(_step3 = _iterator3()).done;) {\n              var prevStyle = _step3.value;\n              _loop(prevStyle);\n            }\n          }\n        }\n        styles.forEach(function (style) {\n          style.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n          if (isJest()) {\n            _this2.animatedStyle.value = _objectSpread(_objectSpread({}, _this2.animatedStyle.value), style.initial.value);\n            style.animatedStyle.current = _this2.animatedStyle;\n          }\n        });\n        if (prevAnimatedProps && !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {\n          prevAnimatedProps.viewDescriptors.remove(viewTag);\n        }\n        if ((_this$props$animatedP3 = this.props.animatedProps) !== null && _this$props$animatedP3 !== void 0 && _this$props$animatedP3.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.add({\n            tag: viewTag,\n            name: viewName,\n            shadowNodeWrapper: shadowNodeWrapper\n          });\n        }\n      }\n    }, {\n      key: \"_attachInlineProps\",\n      value: function _attachInlineProps() {\n        var newInlineProps = extractSharedValuesMapFromProps(this.props);\n        var hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n        if (hasChanged) {\n          if (!this._inlinePropsViewDescriptors) {\n            this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n            var _this$_getViewInfo2 = this._getViewInfo(),\n              viewTag = _this$_getViewInfo2.viewTag,\n              viewName = _this$_getViewInfo2.viewName,\n              shadowNodeWrapper = _this$_getViewInfo2.shadowNodeWrapper,\n              viewConfig = _this$_getViewInfo2.viewConfig;\n            if (Object.keys(newInlineProps).length && viewConfig) {\n              adaptViewConfig(viewConfig);\n            }\n            this._inlinePropsViewDescriptors.add({\n              tag: viewTag,\n              name: viewName,\n              shadowNodeWrapper: shadowNodeWrapper\n            });\n          }\n          var sharableViewDescriptors = this._inlinePropsViewDescriptors.sharableViewDescriptors;\n          var maybeViewRef = NativeReanimatedModule.native ? undefined : {\n            items: new Set([this])\n          };\n          var updaterFunction = function updaterFunction() {\n            'worklet';\n\n            var update = getInlinePropsUpdate(newInlineProps);\n            updateProps(sharableViewDescriptors, update, maybeViewRef);\n          };\n          this._inlineProps = newInlineProps;\n          if (this._inlinePropsMapperId) {\n            stopMapper(this._inlinePropsMapperId);\n          }\n          this._inlinePropsMapperId = null;\n          if (Object.keys(newInlineProps).length) {\n            this._inlinePropsMapperId = startMapper(updaterFunction, Object.values(newInlineProps));\n          }\n        }\n      }\n    }, {\n      key: \"_detachInlineProps\",\n      value: function _detachInlineProps() {\n        if (this._inlinePropsMapperId) {\n          stopMapper(this._inlinePropsMapperId);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._reattachNativeEvents(prevProps);\n        this._attachAnimatedStyles();\n        this._attachInlineProps();\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var _this3 = this;\n        var props = {};\n        var _loop2 = function _loop2() {\n          var value = inputProps[key];\n          if (key === 'style') {\n            var styleProp = inputProps.style;\n            var styles = flattenArray(styleProp != null ? styleProp : []);\n            var processedStyle = styles.map(function (style) {\n              if (style && style.viewDescriptors) {\n                style.viewsRef.add(_this3);\n                if (_this3._isFirstRender) {\n                  _this3.initialStyle = _objectSpread(_objectSpread(_objectSpread({}, style.initial.value), _this3.initialStyle), initialUpdaterRun(style.initial.updater));\n                }\n                return _this3.initialStyle;\n              } else if (hasInlineStyles(style)) {\n                if (_this3._isFirstRender) {\n                  return getInlinePropsUpdate(style);\n                }\n                var newStyle = {};\n                for (var _i4 = 0, _Object$entries3 = Object.entries(style); _i4 < _Object$entries3.length; _i4++) {\n                  var _ref7 = _Object$entries3[_i4];\n                  var _ref8 = _slicedToArray(_ref7, 2);\n                  var _key3 = _ref8[0];\n                  var styleValue = _ref8[1];\n                  if (!isSharedValue(styleValue) && !(_key3 === 'transform' && isInlineStyleTransform(styleValue))) {\n                    newStyle[_key3] = styleValue;\n                  }\n                }\n                return newStyle;\n              } else {\n                return style;\n              }\n            });\n            props[key] = StyleSheet.flatten(processedStyle);\n          } else if (key === 'animatedProps') {\n            var animatedProp = inputProps.animatedProps;\n            if (animatedProp.initial !== undefined) {\n              Object.keys(animatedProp.initial.value).forEach(function (key) {\n                var _animatedProp$initial, _animatedProp$viewsRe;\n                props[key] = (_animatedProp$initial = animatedProp.initial) === null || _animatedProp$initial === void 0 ? void 0 : _animatedProp$initial.value[key];\n                (_animatedProp$viewsRe = animatedProp.viewsRef) === null || _animatedProp$viewsRe === void 0 ? void 0 : _animatedProp$viewsRe.add(_this3);\n              });\n            }\n          } else if (has('current', value) && value.current instanceof WorkletEventHandler) {\n            if (value.current.eventNames.length > 0) {\n              value.current.eventNames.forEach(function (eventName) {\n                props[eventName] = has('listeners', value.current) ? value.current.listeners[eventName] : dummyListener;\n              });\n            } else {\n              props[key] = dummyListener;\n            }\n          } else if (isSharedValue(value)) {\n            if (_this3._isFirstRender) {\n              props[key] = value.value;\n            }\n          } else if (key !== 'onGestureHandlerStateChange' || !isChromeDebugger()) {\n            props[key] = value;\n          }\n        };\n        for (var key in inputProps) {\n          _loop2();\n        }\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n        if (isJest()) {\n          props.animatedStyle = this.animatedStyle;\n        }\n        if (this._isFirstRender) {\n          this._isFirstRender = false;\n        }\n        var platformProps = Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n        return React.createElement(Component, _extends({}, props, {\n          ref: this._setComponentRef\n        }, platformProps));\n      }\n    }]);\n    return AnimatedComponent;\n  }(React.Component);\n  _defineProperty(AnimatedComponent, \"displayName\", void 0);\n  AnimatedComponent.displayName = \"AnimatedComponent(\" + (Component.displayName || Component.name || 'Component') + \")\";\n  return React.forwardRef(function (props, ref) {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\createAnimatedComponent\\createAnimatedComponent.tsx"],"names":["React","WorkletEventHandler","setAndForwardRef","invariant","adaptViewConfig","RNRenderer","configureLayoutAnimations","enableLayoutAnimations","startMapper","stopMapper","isJest","isChromeDebugger","shouldBeUseWeb","isWeb","initialUpdaterRun","SharedTransition","LayoutAnimationType","makeViewDescriptorsSet","getShadowNodeWrapperFromRef","updateProps","NativeReanimatedModule","isSharedValue","removeFromPropsRegistry","JSPropUpdater","getReduceMotionFromConfig","maybeBuild","flattenArray","has","IS_WEB","dummyListener","onlyAnimatedStyles","styles","filter","style","viewDescriptors","isSameAnimatedStyle","style1","style2","viewsRef","isSameAnimatedProps","isInlineStyleTransform","transform","some","t","hasInlineStyles","Object","keys","key","styleValue","extractSharedValuesMapFromProps","props","inlineProps","value","forEach","entries","inlinePropsHasChanged","styles1","styles2","length","getInlinePropsUpdate","update","map","createAnimatedComponent","Component","options","prototype","isReactComponent","name","AnimatedComponent","_defineProperty","constructor","animatedStyle","componentWillUnmount","_detachNativeEvents","_JSPropUpdater","removeOnJSPropsChangeListener","_detachStyles","_detachInlineProps","_sharedElementTransition","unregisterTransition","_viewTag","componentDidMount","_attachNativeEvents","addOnJSPropsChangeListener","_attachAnimatedStyles","_attachInlineProps","_getEventViewRef","_component","getScrollableNode","node","viewTag","prop","current","findNodeHandle","setNativeProps","registerForEvents","unregisterFromEvents","_styles","remove","animatedProps","global","_IS_FABRIC","_reattachNativeEvents","prevProps","reattachNeeded","_updateFromNative","_getViewInfo","viewName","shadowNodeWrapper","viewConfig","component","getAnimatableRef","hostInstance","findHostInstance_DEPRECATED","Error","_nativeTag","uiViewClassName","prevStyles","prevAnimatedProps","_animatedProps","hasReanimated2Props","hasOneSameStyle","prevStyle","isPresent","add","tag","initial","newInlineProps","hasChanged","_inlineProps","_inlinePropsViewDescriptors","sharableViewDescriptors","maybeViewRef","native","undefined","items","Set","updaterFunction","_inlinePropsMapperId","values","componentDidUpdate","getForwardedRef","forwardedRef","setLocalRef","ref","layout","entering","exiting","sharedTransitionTag","LAYOUT","displayName","ENTERING","reduceMotionInExiting","getReduceMotion","EXITING","sharedElementTransition","sharedTransitionStyle","reduceMotionInTransition","registerTransition","_filterNonAnimatedProps","inputProps","styleProp","processedStyle","_isFirstRender","initialStyle","updater","newStyle","StyleSheet","flatten","animatedProp","eventNames","eventName","listeners","render","platformProps","Platform","select","web","default","collapsable","_setComponentRef","forwardRef"],"mappings":"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","sourcesContent":["import type {\n  Component,\n  ComponentClass,\n  ComponentType,\n  FunctionComponent,\n  MutableRefObject,\n  Ref,\n} from 'react';\nimport React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport WorkletEventHandler from '../reanimated2/WorkletEventHandler';\nimport setAndForwardRef from './setAndForwardRef';\nimport '../reanimated2/layoutReanimation/animationsManager';\nimport invariant from 'invariant';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport { RNRenderer } from '../reanimated2/platform-specific/RNRenderer';\nimport {\n  configureLayoutAnimations,\n  enableLayoutAnimations,\n  startMapper,\n  stopMapper,\n} from '../reanimated2/core';\nimport {\n  isJest,\n  isChromeDebugger,\n  shouldBeUseWeb,\n  isWeb,\n} from '../reanimated2/PlatformChecker';\nimport { initialUpdaterRun } from '../reanimated2/animation';\nimport {\n  SharedTransition,\n  LayoutAnimationType,\n} from '../reanimated2/layoutReanimation';\nimport type {\n  SharedValue,\n  StyleProps,\n  ShadowNodeWrapper,\n} from '../reanimated2/commonTypes';\nimport type {\n  ViewDescriptorsSet,\n  ViewRefSet,\n} from '../reanimated2/ViewDescriptorsSet';\nimport { makeViewDescriptorsSet } from '../reanimated2/ViewDescriptorsSet';\nimport { getShadowNodeWrapperFromRef } from '../reanimated2/fabricUtils';\nimport updateProps from '../reanimated2/UpdateProps';\nimport NativeReanimatedModule from '../reanimated2/NativeReanimated';\nimport { isSharedValue } from '../reanimated2/utils';\nimport type { AnimateProps } from '../reanimated2/helperTypes';\nimport { removeFromPropsRegistry } from '../reanimated2/PropsRegistry';\nimport { JSPropUpdater } from './JSPropUpdater';\nimport { getReduceMotionFromConfig } from '../reanimated2/animation/util';\nimport { maybeBuild } from '../animationBuilder';\nimport type { AnimatedComponentProps, AnimatedProps } from './utils';\nimport { flattenArray, has } from './utils';\n\nconst IS_WEB = isWeb();\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nfunction onlyAnimatedStyles(styles: StyleProps[]) {\n  return styles.filter((style) => style?.viewDescriptors);\n}\n\nfunction isSameAnimatedStyle(\n  style1?: StyleProps,\n  style2?: StyleProps\n): boolean {\n  // We cannot use equality check to compare useAnimatedStyle outputs directly.\n  // Instead, we can compare its viewsRefs.\n  return style1?.viewsRef === style2?.viewsRef;\n}\n\nconst isSameAnimatedProps = isSameAnimatedStyle;\n\nfunction isInlineStyleTransform(transform: any): boolean {\n  if (!transform) {\n    return false;\n  }\n  return transform.some((t: Record<string, any>) => hasInlineStyles(t));\n}\n\nfunction hasInlineStyles(style: StyleProps): boolean {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some((key) => {\n    const styleValue = style[key];\n    return (\n      isSharedValue(styleValue) ||\n      (key === 'transform' && isInlineStyleTransform(styleValue))\n    );\n  });\n}\n\nfunction extractSharedValuesMapFromProps(\n  props: AnimatedComponentProps<InitialComponentProps>\n): Record<string, any> {\n  const inlineProps: Record<string, any> = {};\n\n  for (const key in props) {\n    const value = props[key];\n    if (key === 'style') {\n      const styles = flattenArray<StyleProps>(props.style ?? []);\n      styles.forEach((style) => {\n        if (!style) {\n          return;\n        }\n        for (const [key, styleValue] of Object.entries(style)) {\n          if (isSharedValue(styleValue)) {\n            inlineProps[key] = styleValue;\n          } else if (\n            key === 'transform' &&\n            isInlineStyleTransform(styleValue)\n          ) {\n            inlineProps[key] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n\n  return inlineProps;\n}\n\nfunction inlinePropsHasChanged(styles1: StyleProps, styles2: StyleProps) {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n\n  for (const key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) return true;\n  }\n\n  return false;\n}\n\nfunction getInlinePropsUpdate(inlineProps: Record<string, any>) {\n  'worklet';\n  const update: Record<string, any> = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (key === 'transform') {\n      update[key] = styleValue.map((transform: Record<string, any>) => {\n        return getInlinePropsUpdate(transform);\n      });\n    } else if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\n\ntype Options<P> = {\n  setNativeProps: (ref: ComponentRef, props: P) => void;\n};\n\ninterface ComponentRef extends Component {\n  setNativeProps?: (props: Record<string, unknown>) => void;\n  getScrollableNode?: () => ComponentRef;\n  getAnimatableRef?: () => ComponentRef;\n}\n\ninterface InitialComponentProps extends Record<string, unknown> {\n  ref?: Ref<Component>;\n  collapsable?: boolean;\n}\n\nexport default function createAnimatedComponent<P extends object>(\n  component: FunctionComponent<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>>;\n\nexport default function createAnimatedComponent<P extends object>(\n  component: ComponentClass<P>,\n  options?: Options<P>\n): ComponentClass<AnimateProps<P>>;\n\nexport default function createAnimatedComponent(\n  Component: ComponentType<InitialComponentProps>,\n  options?: Options<InitialComponentProps>\n): any {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`\n  );\n\n  class AnimatedComponent extends React.Component<\n    AnimatedComponentProps<InitialComponentProps>\n  > {\n    _styles: StyleProps[] | null = null;\n    _animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;\n    _viewTag = -1;\n    _isFirstRender = true;\n    animatedStyle: { value: StyleProps } = { value: {} };\n    initialStyle = {};\n    _component: ComponentRef | HTMLElement | null = null;\n    _inlinePropsViewDescriptors: ViewDescriptorsSet | null = null;\n    _inlinePropsMapperId: number | null = null;\n    _inlineProps: StyleProps = {};\n    _sharedElementTransition: SharedTransition | null = null;\n    _JSPropUpdater = new JSPropUpdater();\n    static displayName: string;\n\n    constructor(props: AnimatedComponentProps<InitialComponentProps>) {\n      super(props);\n      if (isJest()) {\n        this.animatedStyle = { value: {} };\n      }\n    }\n\n    componentWillUnmount() {\n      this._detachNativeEvents();\n      this._JSPropUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._detachInlineProps();\n      this._sharedElementTransition?.unregisterTransition(this._viewTag);\n    }\n\n    componentDidMount() {\n      this._attachNativeEvents();\n      this._JSPropUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._attachInlineProps();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return (this._component as ComponentRef)?.getScrollableNode\n        ? (this._component as ComponentRef).getScrollableNode?.()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef() as ComponentRef;\n      let viewTag = null; // We set it only if needed\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          if (viewTag === null) {\n            viewTag = findNodeHandle(options?.setNativeProps ? this : node);\n          }\n          prop.current.registerForEvents(viewTag as number, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n    }\n\n    _detachStyles() {\n      if (IS_WEB && this._styles !== null) {\n        for (const style of this._styles) {\n          if (style?.viewsRef) {\n            style.viewsRef.remove(this);\n          }\n        }\n      } else if (this._viewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(this._viewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(this._viewTag);\n        }\n        if (global._IS_FABRIC) {\n          removeFromPropsRegistry(this._viewTag);\n        }\n      }\n    }\n\n    _reattachNativeEvents(\n      prevProps: AnimatedComponentProps<InitialComponentProps>\n    ) {\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n\n      let viewTag = null;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (\n          has('current', prop) &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          if (viewTag === null) {\n            const node = this._getEventViewRef() as ComponentRef;\n            viewTag = findNodeHandle(options?.setNativeProps ? this : node);\n          }\n          prop.current.registerForEvents(viewTag as number, key);\n          prop.current.reattachNeeded = false;\n        }\n      }\n    }\n\n    _updateFromNative(props: StyleProps) {\n      if (options?.setNativeProps) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.setNativeProps(this._component as ComponentRef, props);\n      } else {\n        // eslint-disable-next-line no-unused-expressions\n        (this._component as ComponentRef)?.setNativeProps?.(props);\n      }\n    }\n\n    _getViewInfo() {\n      let viewTag: number | HTMLElement | null;\n      let viewName: string | null;\n      let shadowNodeWrapper: ShadowNodeWrapper | null = null;\n      let viewConfig;\n      // Component can specify ref which should be animated when animated version of the component is created.\n      // Otherwise, we animate the component itself.\n      const component = (this._component as ComponentRef)?.getAnimatableRef\n        ? (this._component as ComponentRef).getAnimatableRef?.()\n        : this;\n\n      if (IS_WEB) {\n        // At this point I assume that `_setComponentRef` was already called and `_component` is set.\n        // `this._component` on web represents HTMLElement of our component, that's why we use casting\n        viewTag = this._component as HTMLElement;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(component);\n        if (!hostInstance) {\n          throw new Error(\n            '[Reanimated] Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n        // we can access view tag in the same way it's accessed here https://github.com/facebook/react/blob/e3f4eb7272d4ca0ee49f27577156b57eeb07cf73/packages/react-native-renderer/src/ReactFabric.js#L146\n        viewTag = hostInstance?._nativeTag;\n        /**\n         * RN uses viewConfig for components for storing different properties of the component(example: https://github.com/facebook/react-native/blob/master/packages/react-native/Libraries/Components/ScrollView/ScrollViewViewConfig.js#L16).\n         * The name we're looking for is in the field named uiViewClassName.\n         */\n        viewName = hostInstance?.viewConfig?.uiViewClassName;\n\n        viewConfig = hostInstance?.viewConfig;\n\n        if (global._IS_FABRIC) {\n          shadowNodeWrapper = getShadowNodeWrapperFromRef(this);\n        }\n      }\n      return { viewTag, viewName, shadowNodeWrapper, viewConfig };\n    }\n\n    _attachAnimatedStyles() {\n      const styles = this.props.style\n        ? onlyAnimatedStyles(flattenArray<StyleProps>(this.props.style))\n        : [];\n      const prevStyles = this._styles;\n      this._styles = styles;\n\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = this.props.animatedProps;\n\n      const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n        this._getViewInfo();\n\n      // update UI props whitelist for this view\n      const hasReanimated2Props =\n        this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n\n      this._viewTag = viewTag as number;\n\n      // remove old styles\n      if (prevStyles) {\n        // in most of the cases, views have only a single animated style and it remains unchanged\n        const hasOneSameStyle =\n          styles.length === 1 &&\n          prevStyles.length === 1 &&\n          isSameAnimatedStyle(styles[0], prevStyles[0]);\n\n        if (!hasOneSameStyle) {\n          // otherwise, remove each style that is not present in new styles\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some((style) =>\n              isSameAnimatedStyle(style, prevStyle)\n            );\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n\n      styles.forEach((style) => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper,\n        });\n        if (isJest()) {\n          /**\n           * We need to connect Jest's TestObject instance whose contains just props object\n           * with the updateProps() function where we update the properties of the component.\n           * We can't update props object directly because TestObject contains a copy of props - look at render function:\n           * const props = this._filterNonAnimatedProps(this.props);\n           */\n          this.animatedStyle.value = {\n            ...this.animatedStyle.value,\n            ...style.initial.value,\n          };\n          style.animatedStyle.current = this.animatedStyle;\n        }\n      });\n\n      // detach old animatedProps\n      if (\n        prevAnimatedProps &&\n        !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)\n      ) {\n        prevAnimatedProps.viewDescriptors!.remove(viewTag as number);\n      }\n\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          tag: viewTag as number,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          name: viewName!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n    }\n\n    _attachInlineProps() {\n      const newInlineProps: Record<string, any> =\n        extractSharedValuesMapFromProps(this.props);\n      const hasChanged = inlinePropsHasChanged(\n        newInlineProps,\n        this._inlineProps\n      );\n\n      if (hasChanged) {\n        if (!this._inlinePropsViewDescriptors) {\n          this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n\n          const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n            this._getViewInfo();\n\n          if (Object.keys(newInlineProps).length && viewConfig) {\n            adaptViewConfig(viewConfig);\n          }\n\n          this._inlinePropsViewDescriptors.add({\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            tag: viewTag as number,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            name: viewName!,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            shadowNodeWrapper: shadowNodeWrapper!,\n          });\n        }\n        const sharableViewDescriptors =\n          this._inlinePropsViewDescriptors.sharableViewDescriptors;\n\n        const maybeViewRef = NativeReanimatedModule.native\n          ? undefined\n          : ({ items: new Set([this]) } as ViewRefSet<any>); // see makeViewsRefSet\n\n        const updaterFunction = () => {\n          'worklet';\n          const update = getInlinePropsUpdate(newInlineProps);\n          updateProps(sharableViewDescriptors, update, maybeViewRef);\n        };\n        this._inlineProps = newInlineProps;\n        if (this._inlinePropsMapperId) {\n          stopMapper(this._inlinePropsMapperId);\n        }\n        this._inlinePropsMapperId = null;\n        if (Object.keys(newInlineProps).length) {\n          this._inlinePropsMapperId = startMapper(\n            updaterFunction,\n            Object.values(newInlineProps)\n          );\n        }\n      }\n    }\n\n    _detachInlineProps() {\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n    }\n\n    componentDidUpdate(\n      prevProps: AnimatedComponentProps<InitialComponentProps>\n    ) {\n      this._reattachNativeEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._attachInlineProps();\n    }\n\n    _setComponentRef = setAndForwardRef<Component | HTMLElement>({\n      getForwardedRef: () =>\n        this.props.forwardedRef as MutableRefObject<\n          Component<Record<string, unknown>, Record<string, unknown>, unknown>\n        >,\n      setLocalRef: (ref) => {\n        // TODO update config\n\n        const tag = IS_WEB\n          ? (ref as HTMLElement)\n          : findNodeHandle(ref as Component);\n\n        const { layout, entering, exiting, sharedTransitionTag } = this.props;\n        if (\n          (layout || entering || exiting || sharedTransitionTag) &&\n          tag != null\n        ) {\n          if (!shouldBeUseWeb()) {\n            enableLayoutAnimations(true, false);\n          }\n          if (layout) {\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.LAYOUT,\n              maybeBuild(\n                layout,\n                undefined /* We don't have to warn user if style has common properties with animation for LAYOUT */,\n                AnimatedComponent.displayName\n              )\n            );\n          }\n          if (entering) {\n            configureLayoutAnimations(\n              tag,\n              LayoutAnimationType.ENTERING,\n              maybeBuild(\n                entering,\n                this.props?.style,\n                AnimatedComponent.displayName\n              )\n            );\n          }\n          if (exiting) {\n            const reduceMotionInExiting =\n              'getReduceMotion' in exiting &&\n              typeof exiting.getReduceMotion === 'function'\n                ? getReduceMotionFromConfig(exiting.getReduceMotion())\n                : getReduceMotionFromConfig();\n            if (!reduceMotionInExiting) {\n              configureLayoutAnimations(\n                tag,\n                LayoutAnimationType.EXITING,\n                maybeBuild(\n                  exiting,\n                  this.props?.style,\n                  AnimatedComponent.displayName\n                )\n              );\n            }\n          }\n          if (sharedTransitionTag && !IS_WEB) {\n            const sharedElementTransition =\n              this.props.sharedTransitionStyle ?? new SharedTransition();\n            const reduceMotionInTransition = getReduceMotionFromConfig(\n              sharedElementTransition.getReduceMotion()\n            );\n            if (!reduceMotionInTransition) {\n              sharedElementTransition.registerTransition(\n                tag as number,\n                sharedTransitionTag\n              );\n              this._sharedElementTransition = sharedElementTransition;\n            }\n          }\n        }\n\n        if (ref !== this._component) {\n          this._component = ref;\n        }\n      },\n    });\n\n    _filterNonAnimatedProps(\n      inputProps: AnimatedComponentProps<InitialComponentProps>\n    ): Record<string, unknown> {\n      const props: Record<string, unknown> = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          const styleProp = inputProps.style;\n          const styles = flattenArray<StyleProps>(styleProp ?? []);\n          const processedStyle: StyleProps = styles.map((style) => {\n            if (style && style.viewDescriptors) {\n              // this is how we recognize styles returned by useAnimatedStyle\n              style.viewsRef.add(this);\n              if (this._isFirstRender) {\n                this.initialStyle = {\n                  ...style.initial.value,\n                  ...this.initialStyle,\n                  ...initialUpdaterRun<StyleProps>(style.initial.updater),\n                };\n              }\n              return this.initialStyle;\n            } else if (hasInlineStyles(style)) {\n              if (this._isFirstRender) {\n                return getInlinePropsUpdate(style);\n              }\n              const newStyle: StyleProps = {};\n              for (const [key, styleValue] of Object.entries(style)) {\n                if (\n                  !isSharedValue(styleValue) &&\n                  !(key === 'transform' && isInlineStyleTransform(styleValue))\n                ) {\n                  newStyle[key] = styleValue;\n                }\n              }\n              return newStyle;\n            } else {\n              return style;\n            }\n          });\n          props[key] = StyleSheet.flatten(processedStyle);\n        } else if (key === 'animatedProps') {\n          const animatedProp = inputProps.animatedProps as Partial<\n            AnimatedComponentProps<AnimatedProps>\n          >;\n          if (animatedProp.initial !== undefined) {\n            Object.keys(animatedProp.initial.value).forEach((key) => {\n              props[key] = animatedProp.initial?.value[key];\n              animatedProp.viewsRef?.add(this);\n            });\n          }\n        } else if (\n          has('current', value) &&\n          value.current instanceof WorkletEventHandler\n        ) {\n          if (value.current.eventNames.length > 0) {\n            value.current.eventNames.forEach((eventName) => {\n              props[eventName] = has('listeners', value.current)\n                ? (value.current.listeners as Record<string, unknown>)[\n                    eventName\n                  ]\n                : dummyListener;\n            });\n          } else {\n            props[key] = dummyListener;\n          }\n        } else if (isSharedValue(value)) {\n          if (this._isFirstRender) {\n            props[key] = (value as SharedValue<any>).value;\n          }\n        } else if (\n          key !== 'onGestureHandlerStateChange' ||\n          !isChromeDebugger()\n        ) {\n          props[key] = value;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      if (isJest()) {\n        props.animatedStyle = this.animatedStyle;\n      }\n\n      if (this._isFirstRender) {\n        this._isFirstRender = false;\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n\n      return (\n        <Component\n          {...props}\n          // Casting is used here, because ref can be null - in that case it cannot be assigned to HTMLElement.\n          // After spending some time trying to figure out what to do with this problem, we decided to leave it this way\n          ref={this._setComponentRef as (ref: Component) => void}\n          {...platformProps}\n        />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  return React.forwardRef<Component>((props, ref) => {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref === null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}