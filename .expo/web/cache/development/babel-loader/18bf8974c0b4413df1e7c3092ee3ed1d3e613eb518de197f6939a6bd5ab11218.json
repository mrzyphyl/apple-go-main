{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { runOnUI } from \"../core\";\nimport { prepareUIRegistry } from \"./FrameCallbackRegistryUI\";\nvar FrameCallbackRegistryJS = function () {\n  function FrameCallbackRegistryJS() {\n    _classCallCheck(this, FrameCallbackRegistryJS);\n    _defineProperty(this, \"nextCallbackId\", 0);\n    prepareUIRegistry();\n  }\n  _createClass(FrameCallbackRegistryJS, [{\n    key: \"registerFrameCallback\",\n    value: function registerFrameCallback(callback) {\n      if (!callback) {\n        return -1;\n      }\n      var callbackId = this.nextCallbackId;\n      this.nextCallbackId++;\n      runOnUI(function () {\n        global._frameCallbackRegistry.registerFrameCallback(callback, callbackId);\n      })();\n      return callbackId;\n    }\n  }, {\n    key: \"unregisterFrameCallback\",\n    value: function unregisterFrameCallback(callbackId) {\n      runOnUI(function () {\n        global._frameCallbackRegistry.unregisterFrameCallback(callbackId);\n      })();\n    }\n  }, {\n    key: \"manageStateFrameCallback\",\n    value: function manageStateFrameCallback(callbackId, state) {\n      runOnUI(function () {\n        global._frameCallbackRegistry.manageStateFrameCallback(callbackId, state);\n      })();\n    }\n  }]);\n  return FrameCallbackRegistryJS;\n}();\nexport { FrameCallbackRegistryJS as default };","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\frameCallback\\FrameCallbackRegistryJS.ts"],"names":["runOnUI","prepareUIRegistry","FrameCallbackRegistryJS","constructor","_defineProperty","registerFrameCallback","callback","callbackId","nextCallbackId","global","_frameCallbackRegistry","unregisterFrameCallback","manageStateFrameCallback","state"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAO;AAEhB,SAASC,iBAAiB;AAAmC,IAExCC,uBAAuB;EAG1CC,SAAAA,wBAAAA,EAAcC;IAAAA,eAAAA,OAAAA,uBAAAA;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,gBAAAA,EAFW,CAAC,CAAA;IAGxBH,iBAAiB,CAAA,CAAE;EACrB;EAAA,YAAA,CAAA,uBAAA;IAAA,GAAA;IAAA,KAAA,EAEAI,SAAAA,sBAAsBC,QAAwC,EAAU;MACtE,IAAI,CAACA,QAAQ,EAAE;QACb,OAAO,CAAC,CAAC;MACX;MAEA,IAAMC,UAAU,GAAG,IAAI,CAACC,cAAc;MACtC,IAAI,CAACA,cAAc,EAAE;MAErBR,OAAO,CAAC,YAAM;QACZS,MAAM,CAACC,sBAAsB,CAACL,qBAAqB,CAACC,QAAQ,EAAEC,UAAU,CAAC;MAC3E,CAAC,CAAC,CAAA,CAAE;MAEJ,OAAOA,UAAU;IACnB;EAAA;IAAA,GAAA;IAAA,KAAA,EAEAI,SAAAA,wBAAwBJ,UAAkB,EAAQ;MAChDP,OAAO,CAAC,YAAM;QACZS,MAAM,CAACC,sBAAsB,CAACC,uBAAuB,CAACJ,UAAU,CAAC;MACnE,CAAC,CAAC,CAAA,CAAE;IACN;EAAA;IAAA,GAAA;IAAA,KAAA,EAEAK,SAAAA,yBAAyBL,UAAkB,EAAEM,KAAc,EAAQ;MACjEb,OAAO,CAAC,YAAM;QACZS,MAAM,CAACC,sBAAsB,CAACE,wBAAwB,CAACL,UAAU,EAAEM,KAAK,CAAC;MAC3E,CAAC,CAAC,CAAA,CAAE;IACN;EAAA;EAAA,OAAA,uBAAA;AAAA;AAAA,SAhCmBX,uBAAuB,IAAA,OAAA","sourcesContent":["import { runOnUI } from '../core';\nimport type { FrameInfo } from './FrameCallbackRegistryUI';\nimport { prepareUIRegistry } from './FrameCallbackRegistryUI';\n\nexport default class FrameCallbackRegistryJS {\n  private nextCallbackId = 0;\n\n  constructor() {\n    prepareUIRegistry();\n  }\n\n  registerFrameCallback(callback: (frameInfo: FrameInfo) => void): number {\n    if (!callback) {\n      return -1;\n    }\n\n    const callbackId = this.nextCallbackId;\n    this.nextCallbackId++;\n\n    runOnUI(() => {\n      global._frameCallbackRegistry.registerFrameCallback(callback, callbackId);\n    })();\n\n    return callbackId;\n  }\n\n  unregisterFrameCallback(callbackId: number): void {\n    runOnUI(() => {\n      global._frameCallbackRegistry.unregisterFrameCallback(callbackId);\n    })();\n  }\n\n  manageStateFrameCallback(callbackId: number, state: boolean): void {\n    runOnUI(() => {\n      global._frameCallbackRegistry.manageStateFrameCallback(callbackId, state);\n    })();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}