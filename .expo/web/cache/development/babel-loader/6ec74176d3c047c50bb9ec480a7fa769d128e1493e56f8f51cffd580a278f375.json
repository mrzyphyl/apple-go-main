{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { jsVersion } from \"./jsVersion\";\nexport function checkCppVersion() {\n  var cppVersion = global._REANIMATED_VERSION_CPP;\n  if (cppVersion === undefined) {\n    throw new Error(\"[Reanimated] Couldn't determine the version of the native part of Reanimated.\\nSee `https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#couldnt-determine-the-version-of-the-native-part-of-reanimated` for more details.\");\n  }\n  var ok = matchVersion(jsVersion, cppVersion);\n  if (!ok) {\n    throw new Error(\"[Reanimated] Mismatch between JavaScript part and native part of Reanimated (\" + jsVersion + \" vs \" + cppVersion + \").\\nSee `https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-part-and-native-part-of-reanimated` for more details.\");\n  }\n}\nexport function matchVersion(version1, version2) {\n  if (version1.match(/^\\d+\\.\\d+\\.\\d+$/) && version2.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    var _version1$split = version1.split('.'),\n      _version1$split2 = _slicedToArray(_version1$split, 2),\n      major1 = _version1$split2[0],\n      minor1 = _version1$split2[1];\n    var _version2$split = version2.split('.'),\n      _version2$split2 = _slicedToArray(_version2$split, 2),\n      major2 = _version2$split2[0],\n      minor2 = _version2$split2[1];\n    return major1 === major2 && minor1 === minor2;\n  } else {\n    return version1 === version2;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\platform-specific\\checkCppVersion.ts"],"names":["jsVersion","checkCppVersion","cppVersion","global","_REANIMATED_VERSION_CPP","undefined","Error","ok","matchVersion","version1","version2","match","major1","minor1","split","major2","minor2"],"mappings":";AAAA,SAASA,SAAS;AAElB,OAAO,SAASC,eAAeA,CAAAA,EAAG;EAChC,IAAMC,UAAU,GAAGC,MAAM,CAACC,uBAAuB;EACjD,IAAIF,UAAU,KAAKG,SAAS,EAAE;IAC5B,MAAM,IAAIC,KAAK,uPAEqJ,CACnK;EACH;EACA,IAAMC,EAAE,GAAGC,YAAY,CAACR,SAAS,EAAEE,UAAU,CAAC;EAC9C,IAAI,CAACK,EAAE,EAAE;IACP,MAAM,IAAID,KAAK,mFACmEN,SAAU,YAAME,UAAW,8KACuD,CACnK;EACH;AACF;AAIA,OAAO,SAASM,YAAYA,CAACC,QAAgB,EAAEC,QAAgB,EAAE;EAC/D,IAAID,QAAQ,CAACE,KAAK,CAAC,iBAAiB,CAAC,IAAID,QAAQ,CAACC,KAAK,CAAC,iBAAiB,CAAC,EAAE;IAE1E,IAAA,eAAA,GAAyBF,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC;MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;MAArCF,MAAM,GAAA,gBAAA;MAAEC,MAAM,GAAA,gBAAA;IACrB,IAAA,eAAA,GAAyBH,QAAQ,CAACI,KAAK,CAAC,GAAG,CAAC;MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;MAArCC,MAAM,GAAA,gBAAA;MAAEC,MAAM,GAAA,gBAAA;IACrB,OAAOJ,MAAM,KAAKG,MAAM,IAAIF,MAAM,KAAKG,MAAM;EAC/C,CAAC,MAAM;IAEL,OAAOP,QAAQ,KAAKC,QAAQ;EAC9B;AACF","sourcesContent":["import { jsVersion } from './jsVersion';\n\nexport function checkCppVersion() {\n  const cppVersion = global._REANIMATED_VERSION_CPP;\n  if (cppVersion === undefined) {\n    throw new Error(\n      `[Reanimated] Couldn't determine the version of the native part of Reanimated.\nSee \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#couldnt-determine-the-version-of-the-native-part-of-reanimated\\` for more details.`\n    );\n  }\n  const ok = matchVersion(jsVersion, cppVersion);\n  if (!ok) {\n    throw new Error(\n      `[Reanimated] Mismatch between JavaScript part and native part of Reanimated (${jsVersion} vs ${cppVersion}).\nSee \\`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-part-and-native-part-of-reanimated\\` for more details.`\n    );\n  }\n}\n\n// This is used only in test files, therefore it is reported by ts-prune (which is desired)\n// ts-prune-ignore-next\nexport function matchVersion(version1: string, version2: string) {\n  if (version1.match(/^\\d+\\.\\d+\\.\\d+$/) && version2.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    // x.y.z, compare only major and minor, skip patch\n    const [major1, minor1] = version1.split('.');\n    const [major2, minor2] = version2.split('.');\n    return major1 === major2 && minor1 === minor2;\n  } else {\n    // alpha, beta or rc, compare everything\n    return version1 === version2;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}