{"ast":null,"code":"import NativeReanimatedModule from \"./NativeReanimated\";\nimport { nativeShouldBeMock, isWeb } from \"./PlatformChecker\";\nimport { makeShareableCloneRecursive } from \"./shareables\";\nimport { initializeUIRuntime } from \"./initializers\";\nimport { SensorContainer } from \"./SensorContainer\";\nexport { startMapper, stopMapper } from \"./mappers\";\nexport { runOnJS, runOnUI } from \"./threads\";\nexport { createWorkletRuntime } from \"./runtimes\";\nexport { makeShareable, makeShareableCloneRecursive } from \"./shareables\";\nexport { makeMutable, makeRemote } from \"./mutables\";\nexport var isReanimated3 = function isReanimated3() {\n  return true;\n};\nexport var isConfigured = isReanimated3;\nglobal._WORKLET = false;\nglobal._log = function (s) {\n  console.log(s);\n};\nexport function getViewProp(viewTag, propName) {\n  if (global._IS_FABRIC) {\n    throw new Error('[Reanimated] `getViewProp` is not supported on Fabric yet.');\n  }\n  return new Promise(function (resolve, reject) {\n    return NativeReanimatedModule.getViewProp(viewTag, propName, function (result) {\n      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {\n        reject(result);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\nfunction getSensorContainer() {\n  if (!global.__sensorContainer) {\n    global.__sensorContainer = new SensorContainer();\n  }\n  return global.__sensorContainer;\n}\nexport function registerEventHandler(eventHandler, eventName) {\n  var emitterReactTag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n  function handleAndFlushAnimationFrame(eventTimestamp, event) {\n    'worklet';\n\n    global.__frameTimestamp = eventTimestamp;\n    eventHandler(event);\n    global.__flushAnimationFrame(eventTimestamp);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.registerEventHandler(makeShareableCloneRecursive(handleAndFlushAnimationFrame), eventName, emitterReactTag);\n}\nexport function unregisterEventHandler(id) {\n  return NativeReanimatedModule.unregisterEventHandler(id);\n}\nexport function subscribeForKeyboardEvents(eventHandler, options) {\n  var _options$isStatusBarT;\n  function handleAndFlushAnimationFrame(state, height) {\n    'worklet';\n\n    var now = performance.now();\n    global.__frameTimestamp = now;\n    eventHandler(state, height);\n    global.__flushAnimationFrame(now);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.subscribeForKeyboardEvents(makeShareableCloneRecursive(handleAndFlushAnimationFrame), (_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false);\n}\nexport function unsubscribeFromKeyboardEvents(listenerId) {\n  return NativeReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);\n}\nexport function registerSensor(sensorType, config, eventHandler) {\n  var sensorContainer = getSensorContainer();\n  return sensorContainer.registerSensor(sensorType, config, makeShareableCloneRecursive(eventHandler));\n}\nexport function initializeSensor(sensorType, config) {\n  var sensorContainer = getSensorContainer();\n  return sensorContainer.initializeSensor(sensorType, config);\n}\nexport function unregisterSensor(sensorId) {\n  var sensorContainer = getSensorContainer();\n  return sensorContainer.unregisterSensor(sensorId);\n}\nif (!isWeb()) {\n  initializeUIRuntime();\n}\nvar featuresConfig = {\n  enableLayoutAnimations: false,\n  setByUser: false\n};\nexport function enableLayoutAnimations(flag) {\n  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (isCallByUser) {\n    featuresConfig = {\n      enableLayoutAnimations: flag,\n      setByUser: true\n    };\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {\n    featuresConfig.enableLayoutAnimations = flag;\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  }\n}\nexport function configureLayoutAnimations(viewTag, type, config) {\n  var sharedTransitionTag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  NativeReanimatedModule.configureLayoutAnimation(viewTag, type, sharedTransitionTag, makeShareableCloneRecursive(config));\n}\nexport function configureProps(uiProps, nativeProps) {\n  if (!nativeShouldBeMock()) {\n    NativeReanimatedModule.configureProps(uiProps, nativeProps);\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\sirFrancis-main\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\core.ts"],"names":["NativeReanimatedModule","nativeShouldBeMock","isWeb","makeShareableCloneRecursive","initializeUIRuntime","SensorContainer","startMapper","stopMapper","runOnJS","runOnUI","createWorkletRuntime","makeShareable","makeMutable","makeRemote","isReanimated3","isConfigured","global","_WORKLET","_log","s","console","log","getViewProp","viewTag","propName","_IS_FABRIC","Error","Promise","resolve","reject","result","substr","getSensorContainer","__sensorContainer","registerEventHandler","eventHandler","eventName","emitterReactTag","handleAndFlushAnimationFrame","eventTimestamp","event","__frameTimestamp","__flushAnimationFrame","undefined","unregisterEventHandler","id","subscribeForKeyboardEvents","options","state","height","now","performance","isStatusBarTranslucentAndroid","unsubscribeFromKeyboardEvents","listenerId","registerSensor","sensorType","config","sensorContainer","initializeSensor","unregisterSensor","sensorId","featuresConfig","enableLayoutAnimations","setByUser","flag","isCallByUser","configureLayoutAnimations","type","sharedTransitionTag","configureLayoutAnimation","configureProps","uiProps","nativeProps"],"mappings":"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","sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { nativeShouldBeMock, isWeb } from './PlatformChecker';\nimport type {\n  AnimatedKeyboardOptions,\n  SensorConfig,\n  SensorType,\n  SharedValue,\n  Value3D,\n  ValueRotation,\n} from './commonTypes';\nimport { makeShareableCloneRecursive } from './shareables';\nimport type {\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n} from './layoutReanimation';\nimport { initializeUIRuntime } from './initializers';\nimport type {\n  ProgressAnimationCallback,\n  SharedTransitionAnimationsFunction,\n} from './layoutReanimation/animationBuilder/commonTypes';\nimport { SensorContainer } from './SensorContainer';\n\nexport { startMapper, stopMapper } from './mappers';\nexport { runOnJS, runOnUI } from './threads';\nexport { createWorkletRuntime } from './runtimes';\nexport type { WorkletRuntime } from './runtimes';\nexport { makeShareable, makeShareableCloneRecursive } from './shareables';\nexport { makeMutable, makeRemote } from './mutables';\n\n/**\n * @returns `true` in Reanimated 3, doesn't exist in Reanimated 2 or 1\n */\nexport const isReanimated3 = () => true;\n\n// Superseded by check in `/src/threads.ts`.\n// Used by `react-navigation` to detect if using Reanimated 2 or 3.\n/**\n * @deprecated This function was superseded by other checks.\n * We keep it here for backward compatibility reasons.\n * If you need to check if you are using Reanimated 3 or Reanimated 2\n * please use `isReanimated3` function instead.\n * @returns `true` in Reanimated 3, doesn't exist in Reanimated 2\n */\nexport const isConfigured = isReanimated3;\n\n// this is for web implementation\nglobal._WORKLET = false;\nglobal._log = function (s: string) {\n  console.log(s);\n};\n\nexport function getViewProp<T>(viewTag: number, propName: string): Promise<T> {\n  if (global._IS_FABRIC) {\n    throw new Error(\n      '[Reanimated] `getViewProp` is not supported on Fabric yet.'\n    );\n  }\n\n  return new Promise((resolve, reject) => {\n    return NativeReanimatedModule.getViewProp(\n      viewTag,\n      propName,\n      (result: T) => {\n        if (typeof result === 'string' && result.substr(0, 6) === 'error:') {\n          reject(result);\n        } else {\n          resolve(result);\n        }\n      }\n    );\n  });\n}\n\nfunction getSensorContainer(): SensorContainer {\n  if (!global.__sensorContainer) {\n    global.__sensorContainer = new SensorContainer();\n  }\n  return global.__sensorContainer;\n}\n\nexport function registerEventHandler<T>(\n  eventHandler: (event: T) => void,\n  eventName: string,\n  emitterReactTag = -1\n): number {\n  function handleAndFlushAnimationFrame(eventTimestamp: number, event: T) {\n    'worklet';\n    global.__frameTimestamp = eventTimestamp;\n    eventHandler(event);\n    global.__flushAnimationFrame(eventTimestamp);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.registerEventHandler(\n    makeShareableCloneRecursive(handleAndFlushAnimationFrame),\n    eventName,\n    emitterReactTag\n  );\n}\n\nexport function unregisterEventHandler(id: number): void {\n  return NativeReanimatedModule.unregisterEventHandler(id);\n}\n\nexport function subscribeForKeyboardEvents(\n  eventHandler: (state: number, height: number) => void,\n  options: AnimatedKeyboardOptions\n): number {\n  // TODO: this should really go with the same code path as other events, that is\n  // via registerEventHandler. For now we are copying the code from there.\n  function handleAndFlushAnimationFrame(state: number, height: number) {\n    'worklet';\n    const now = performance.now();\n    global.__frameTimestamp = now;\n    eventHandler(state, height);\n    global.__flushAnimationFrame(now);\n    global.__frameTimestamp = undefined;\n  }\n  return NativeReanimatedModule.subscribeForKeyboardEvents(\n    makeShareableCloneRecursive(handleAndFlushAnimationFrame),\n    options.isStatusBarTranslucentAndroid ?? false\n  );\n}\n\nexport function unsubscribeFromKeyboardEvents(listenerId: number): void {\n  return NativeReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);\n}\n\nexport function registerSensor(\n  sensorType: SensorType,\n  config: SensorConfig,\n  eventHandler: (\n    data: Value3D | ValueRotation,\n    orientationDegrees: number\n  ) => void\n): number {\n  const sensorContainer = getSensorContainer();\n  return sensorContainer.registerSensor(\n    sensorType,\n    config,\n    makeShareableCloneRecursive(eventHandler)\n  );\n}\n\nexport function initializeSensor(\n  sensorType: SensorType,\n  config: SensorConfig\n): SharedValue<Value3D | ValueRotation> {\n  const sensorContainer = getSensorContainer();\n  return sensorContainer.initializeSensor(sensorType, config);\n}\n\nexport function unregisterSensor(sensorId: number): void {\n  const sensorContainer = getSensorContainer();\n  return sensorContainer.unregisterSensor(sensorId);\n}\n\nif (!isWeb()) {\n  initializeUIRuntime();\n}\n\ntype FeaturesConfig = {\n  enableLayoutAnimations: boolean;\n  setByUser: boolean;\n};\n\nlet featuresConfig: FeaturesConfig = {\n  enableLayoutAnimations: false,\n  setByUser: false,\n};\n\nexport function enableLayoutAnimations(\n  flag: boolean,\n  isCallByUser = true\n): void {\n  if (isCallByUser) {\n    featuresConfig = {\n      enableLayoutAnimations: flag,\n      setByUser: true,\n    };\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  } else if (\n    !featuresConfig.setByUser &&\n    featuresConfig.enableLayoutAnimations !== flag\n  ) {\n    featuresConfig.enableLayoutAnimations = flag;\n    NativeReanimatedModule.enableLayoutAnimations(flag);\n  }\n}\n\nexport function configureLayoutAnimations(\n  viewTag: number | HTMLElement,\n  type: LayoutAnimationType,\n  config:\n    | LayoutAnimationFunction\n    | Keyframe\n    | SharedTransitionAnimationsFunction\n    | ProgressAnimationCallback,\n  sharedTransitionTag = ''\n): void {\n  NativeReanimatedModule.configureLayoutAnimation(\n    viewTag as number, // On web this function is no-op, therefore we can cast viewTag to number\n    type,\n    sharedTransitionTag,\n    makeShareableCloneRecursive(config)\n  );\n}\n\nexport function configureProps(uiProps: string[], nativeProps: string[]): void {\n  if (!nativeShouldBeMock()) {\n    NativeReanimatedModule.configureProps(uiProps, nativeProps);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}